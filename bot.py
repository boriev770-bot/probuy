import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BOT_TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"  # <-- –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
MANAGER_ID = 7095008192       # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
WAREHOUSE_ID = 7095008192     # ID —Å–∫–ª–∞–¥–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    client_code TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS tracks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    track_code TEXT,
    delivery_method TEXT
)''')

conn.commit()

# --- –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ---
def delivery_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üöó –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ")
    kb.button(text="üöô –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ")
    kb.button(text="‚úà –ê–≤–∏–∞")
    kb.button(text="üöÇ –ñ–î")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ ---
def get_or_create_client_code(user_id: int):
    cursor.execute("SELECT client_code FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0] + 1
    code = f"PB{count:05d}"
    cursor.execute("INSERT INTO users (user_id, client_code) VALUES (?, ?)", (user_id, code))
    conn.commit()
    return code

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    code = get_or_create_client_code(message.from_user.id)
    await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –Ω–æ–º–µ—Ä: {code}")

# --- –ó–∞–∫–∞–∑–∞—Ç—å ---
@dp.message(Command("buy"))
async def buy_cmd(message: types.Message):
    await message.answer("‚úç –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ?")
    dp.message.register(forward_to_manager)

async def forward_to_manager(message: types.Message):
    user = message.from_user
    code = get_or_create_client_code(user.id)
    text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
–ö–ª–∏–µ–Ω—Ç: {user.full_name} ({user.id})
–ö–æ–¥: {code}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    await bot.send_message(MANAGER_ID, text)
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

# --- –ú–µ–Ω–µ–¥–∂–µ—Ä ---
@dp.message(Command("manager"))
async def manager_cmd(message: types.Message):
    user = message.from_user
    code = get_or_create_client_code(user.id)
    text = f"üì© –ó–∞–ø—Ä–æ—Å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É!
–ö–ª–∏–µ–Ω—Ç: {user.full_name} ({user.id})
–ö–æ–¥: {code}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    await bot.send_message(MANAGER_ID, text)
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

# --- –ú–æ–π –∫–æ–¥ ---
@dp.message(Command("mycod"))
async def mycod_cmd(message: types.Message):
    code = get_or_create_client_code(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –Ω–æ–º–µ—Ä: {code}")

# --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ ---
@dp.message(Command("getcod"))
async def getcod_cmd(message: types.Message):
    await message.answer("üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:")
    dp.message.register(process_track)

async def process_track(message: types.Message):
    track = message.text.strip()
    await message.answer("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard())
    dp.message.register(lambda msg: save_track(msg, track))

async def save_track(message: types.Message, track: str):
    delivery = message.text
    user = message.from_user
    code = get_or_create_client_code(user.id)

    cursor.execute("INSERT INTO tracks (user_id, track_code, delivery_method) VALUES (?, ?, ?)",
                   (user.id, track, delivery))
    conn.commit()

    cursor.execute("SELECT track_code, delivery_method FROM tracks WHERE user_id = ?", (user.id,))
    rows = cursor.fetchall()
    history = "\n".join([f"{t} ({d})" for t, d in rows])

    text = (f"‚úÖ –¢—Ä–µ–∫ {track} ({delivery}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            f"üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤:\n{history}")
    await message.answer(text)

    warehouse_text = (f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n"
                      f"–ö–ª–∏–µ–Ω—Ç: {user.full_name} ({user.id})\n"
                      f"–ö–æ–¥: {code}\n"
                      f"–¢—Ä–µ–∫: {track} ({delivery})\n\n"
                      f"–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤:\n{history}")
    await bot.send_message(WAREHOUSE_ID, warehouse_text)

# --- –ú–æ–∏ —Ç—Ä–µ–∫–∏ ---
@dp.message(Command("mytracks"))
async def mytracks_cmd(message: types.Message):
    cursor.execute("SELECT track_code, delivery_method FROM tracks WHERE user_id = ?", (message.from_user.id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        return
    history = "\n".join([f"{t} ({d})" for t, d in rows])
    await message.answer(f"üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤:\n{history}")

# --- –û—Ç–º–µ–Ω–∞ ---
@dp.message(Command("cancel"))
async def cancel_cmd(message: types.Message):
    dp.message.handlers.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
