import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
WAREHOUSE_ID = 7095008192  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–∫–ª–∞–¥–∞

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w') as f:
            json.dump({}, f)
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

async def generate_user_code(user_id, message=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        data[user_id] = {
            "code": new_code,
            "tracks": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "state": None
        }
        save_data(data)
    return data[user_id]['code']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_code = await generate_user_code(message.from_user.id, message)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–±–æ—Ä–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/mytracks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['mycod'])
async def show_my_code(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–æ–¥"""
    try:
        user_code = await generate_user_code(message.from_user.id, message)
        await message.answer(
            f"üîë –í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.\n"
            f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: /adress"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /mycod: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞")

@dp.message_handler(commands=['mytracks'])
async def show_my_tracks(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data or not data[user_id].get('tracks'):
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤.")
            return
            
        tracks = data[user_id]['tracks']
        tracks_list = "\n".join(
            f"{i+1}. {t['track']} ({t['date']})" 
            for i, t in enumerate(tracks)
        )
        
        await message.answer(
            f"üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ (–≤—Å–µ–≥–æ {len(tracks)}):\n\n"
            f"{tracks_list}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /mytracks: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤")

@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞"""
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        user_code = await generate_user_code(user_id, message)
        
        data[user_id]['state'] = UserStates.WAITING_FOR_TRACK
        save_data(data)
        
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ {user_code}:\n\n"
            "–§–æ—Ä–º–∞—Ç: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (10-20 —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "–ü—Ä–∏–º–µ—Ä: AB123456789CD"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /sendtrack: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track_number(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"""
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_TRACK:
            return
        
        track = message.text.upper()
        user_code = data[user_id]['code']
        full_name = data[user_id].get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
        new_track = {
            "track": track,
            "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        data[user_id]['tracks'].append(new_track)
        track_count = len(data[user_id]['tracks'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
        tracks_history = "\n".join(
            f"{i+1}. {t['track']}" 
            for i, t in enumerate(data[user_id]['tracks'])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥
        await bot.send_message(
            WAREHOUSE_ID,
            f"üì¶ –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
            f"üÜî –ö–æ–¥: {user_code}\n"
            f"üìÆ –ù–æ–≤—ã–π —Ç—Ä–µ–∫: {track}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üî¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {track_count}\n\n"
            f"üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤:\n{tracks_history}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        await message.answer(
            f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–í–∞—à –∫–æ–¥: {user_code}\n"
            f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {track_count}\n\n"
            f"üìã –í–∞—à–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞:\n{tracks_history}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è: /mytracks"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data[user_id]['state'] = None
        save_data(data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
