import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192  # –í–∞—à Telegram ID
WAREHOUSE_ID = 7095008192  # ID —á–∞—Ç–∞ —Å–∫–ª–∞–¥–∞
DATA_FILE = "data.json"

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

# –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def get_user_data(user_id, message=None):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(u['code'][2:]) for u in data.values()] or [0])
        data[user_id] = {
            "code": f"PR{last_code + 1:05d}",
            "tracks": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "state": None
        }
        save_data(data)
    return data[user_id]

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = await get_user_data(message.from_user.id, message)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –í–∞—à –∫–æ–¥: {user['code']}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –≤–∞—à –∫–æ–¥\n"
        "/mytracks - —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['mytracks'])
async def cmd_mytracks(message: types.Message):
    user = await get_user_data(message.from_user.id)
    if not user['tracks']:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤")
        return
    
    tracks_list = "\n".join(
        f"{i+1}. {t['track']} ({t['date']})" 
        for i, t in enumerate(user['tracks'])
    )
    await message.answer(
        f"üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ (–≤—Å–µ–≥–æ {len(user['tracks'])}):\n\n"
        f"{tracks_list}"
    )

@dp.message_handler(commands=['sendtrack'])
async def cmd_sendtrack(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    user = await get_user_data(user_id, message)
    
    data[user_id]['state'] = UserStates.WAITING_FOR_TRACK
    save_data(data)
    
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, 10-20 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "–ü—Ä–∏–º–µ—Ä: AB123456789CD"
    )

@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if data.get(user_id, {}).get('state') != UserStates.WAITING_FOR_TRACK:
        return
    
    track = message.text.upper()
    user = data[user_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
    new_track = {
        "track": track,
        "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    user['tracks'].append(new_track)
    track_count = len(user['tracks'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–∫–æ–≤
    tracks_history = "\n".join(
        f"{i+1}. {t['track']}" 
        for i, t in enumerate(user['tracks'])
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–ª–∞–¥
    await bot.send_message(
        WAREHOUSE_ID,
        f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user['full_name']}\n"
        f"üÜî –ö–æ–¥: {user['code']}\n"
        f"üìÆ –¢—Ä–µ–∫: {track}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üî¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {track_count}\n\n"
        f"üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤:\n{tracks_history}"
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {track_count}\n"
        f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é: /mytracks"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    data[user_id]['state'] = None
    save_data(data)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
