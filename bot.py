import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192  # –í–∞—à Telegram ID
WAREHOUSE_ID = 123456789  # ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–∞ (—á–∏—Å–ª–æ)

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

async def generate_user_code(user_id):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        data[user_id] = {
            "code": new_code,
            "tracks": [],
            "username": "",
            "full_name": "",
            "state": None
        }
        save_data(data)
    return data[user_id]['code']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–±–æ—Ä–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/mytracks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–µ–∫–∏\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['mycod'])
async def show_my_code(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    await message.answer(
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n"
        f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: /adress"
    )

@dp.message_handler(commands=['mytracks'])
async def show_my_tracks(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id in data and data[user_id].get('tracks'):
        tracks_list = "\n".join(
            f"{idx+1}. {track['track']} ({track['date']})" 
            for idx, track in enumerate(data[user_id]['tracks'])
        )
        await message.answer(
            f"üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ (–≤—Å–µ–≥–æ {len(data[user_id]['tracks'])}):\n\n"
            f"{tracks_list}"
        )
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤.")

@dp.message_handler(commands=['adress'])
async def send_address(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    address = CHINA_WAREHOUSE_ADDRESS.format(user_code=user_code)
    await message.answer(f"üè≠ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n\n{address}")

@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    user_code = await generate_user_code(user_id)
    
    data[user_id]['state'] = UserStates.WAITING_FOR_TRACK
    save_data(data)
    
    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ {user_code}:\n\n"
        "–ü—Ä–∏–º–µ—Ä: AB123456789CD"
    )

@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track_number(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_TRACK:
        return
    
    track = message.text.upper()
    user_code = data[user_id]['code']
    full_name = data[user_id].get('full_name', message.from_user.full_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'tracks' not in data[user_id]:
        data[user_id]['tracks'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
    new_track = {
        "track": track,
        "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    data[user_id]['tracks'].append(new_track)
    track_count = len(data[user_id]['tracks'])
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∫–ª–∞–¥–∞
        warehouse_msg = (
            f"üì¶ –ü–û–°–¢–£–ü–ò–õ –ù–û–í–´–ô –¢–†–ï–ö-–ù–û–ú–ï–†\n\n"
            f"‚ñ™ –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {user_code}\n"
            f"‚ñ™ –ò–º—è: {full_name}\n"
            f"‚ñ™ –¢—Ä–µ–∫: {track}\n"
            f"‚ñ™ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"‚ñ™ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞: {track_count}\n"
            f"‚ñ™ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤: {', '.join(t['track'] for t in data[user_id]['tracks'])}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–ª–∞–¥
        await bot.send_message(
            chat_id=WAREHOUSE_ID,
            text=warehouse_msg
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–í–∞—à –∫–æ–¥: {user_code}\n"
            f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫: {track}\n"
            f"–í—Å–µ–≥–æ –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤: {track_count}"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥: {e}")
        await message.answer(
            "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –Ω–∞ —Å–∫–ª–∞–¥. "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ."
        )
        await bot.send_message(
            ADMIN_ID,
            f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞!\n"
            f"–ö–ª–∏–µ–Ω—Ç: {full_name} ({user_code})\n"
            f"–¢—Ä–µ–∫: {track}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data[user_id]['state'] = None
    save_data(data)

@dp.message_handler(commands=['buy'])
async def start_order(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    data = load_data()
    user_id = str(message.from_user.id)
    
    data[user_id] = {
        "code": user_code,
        "tracks": data.get(user_id, {}).get("tracks", []),
        "username": message.from_user.username,
        "full_name": message.from_user.full_name,
        "state": UserStates.WAITING_FOR_ORDER
    }
    save_data(data)
    
    await message.answer(
        f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∫–æ–¥: {user_code})\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ?\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§—É—Ç–±–æ–ª–∫–∏ —á–µ—Ä–Ω—ã–µ: 5 —à—Ç\n"
        "–î–∂–∏–Ω—Å—ã —Å–∏–Ω–∏–µ: 2 —à—Ç"
    )

@dp.message_handler(content_types=[ContentType.TEXT, ContentType.PHOTO, ContentType.DOCUMENT])
async def handle_all_messages(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    if user_id in data and data[user_id].get('state') == UserStates.WAITING_FOR_ORDER:
        user_code = data[user_id]['code']
        full_name = data[user_id].get('full_name', message.from_user.full_name)
        username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç"
        
        order_description = message.caption or message.text or "–û–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            admin_msg = await bot.send_message(
                ADMIN_ID,
                f"üõç –ù–û–í–´–ô –ó–ê–ö–ê–ó\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
                f"üìé Username: {username}\n"
                f"üÜî –ö–æ–¥: {user_code}\n\n"
                f"üì¶ –ó–∞–∫–∞–∑:\n{order_description}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            if message.photo:
                await bot.send_photo(
                    ADMIN_ID,
                    message.photo[-1].file_id,
                    reply_to_message_id=admin_msg.message_id
                )
            elif message.document:
                await bot.send_document(
                    ADMIN_ID,
                    message.document.file_id,
                    reply_to_message_id=admin_msg.message_id
                )
            
            await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data[user_id]['state'] = None
        save_data(data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–æ–ø–µ—Ä–∞—Ç–æ—Ä"
    if message.text and message.text.lower() == "–æ–ø–µ—Ä–∞—Ç–æ—Ä":
        await contact_manager(message)
        return
    
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.")

async def contact_manager(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    full_name = message.from_user.full_name
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç"
    
    await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üìû –ó–ê–ü–†–û–° –°–í–Ø–ó–ò –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
            f"üìé Username: {username}\n"
            f"üÜî –ö–æ–¥: {user_code}\n\n"
            f"–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: https://t.me/{message.from_user.username}" 
            if message.from_user.username else ""
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
