import os
import logging
import re
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import (
    init_db,
    get_user_code,
    get_or_create_user_code,
    get_tracks,
    add_track,
    add_track_photo,
    get_track_photos,
    find_user_ids_by_track,
)


logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")
logger.info("RUNNING FILE: %s", os.path.abspath(__file__))

BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

CHINA_WAREHOUSE_ADDRESS = (
    "üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>\n\n"
    "‚¨áÔ∏è –í–°–¢–ê–í–¨–¢–ï –ù–ò–ñ–ï –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° –°–ö–õ–ê–î–ê (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) ‚¨áÔ∏è\n"
    "<i>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è ..., –≥. ..., —Ä–∞–π–æ–Ω ..., —É–ª. ..., —Å–∫–ª–∞–¥ ‚Ññ...</i>\n\n"
    "üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>\n"
)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class TrackStates(StatesGroup):
    waiting_for_track = State()
    choosing_delivery = State()
    confirming = State()


class BuyStates(StatesGroup):
    waiting_for_details = State()


class PhotoStates(StatesGroup):
    waiting_for_track = State()


def get_main_menu_inline() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="menu_buy"),
        InlineKeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="menu_manager"),
    )
    kb.add(
        InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="menu_getcod"),
        InlineKeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="menu_address"),
    )
    kb.add(
        InlineKeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="menu_sendtrack"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", callback_data="menu_mytracks"),
    )
    kb.add(
        InlineKeyboardButton("üì∑ –§–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å", callback_data="menu_photokontrol"),
    )
    return kb


DELIVERY_TYPES = {
    "fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"},
    "slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"},
    "rail": {"name": "üöÇ –ñ–î"},
    "air": {"name": "‚úàÔ∏è –ê–≤–∏–∞"},
}


def delivery_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for key, info in DELIVERY_TYPES.items():
        kb.add(InlineKeyboardButton(info["name"], callback_data=f"delivery_{key}"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))
    return kb


def confirm_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_track"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
    )
    return kb


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
    if not tracks:
        return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    lines: List[str] = []
    for idx, (track, delivery) in enumerate(tracks, start=1):
        suffix = f" ({delivery})" if delivery else ""
        lines.append(f"{idx}. <code>{track}</code>{suffix}")
    return "\n".join(lines)


def is_valid_track_number(text: str) -> bool:
    t = (text or "").strip().upper()
    if len(t) < 8 or len(t) > 40:
        return False
    return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


def extract_track_from_text(text: Optional[str]) -> Optional[str]:
    if not text:
        return None
    text_upper = text.upper()
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ A-Z0-9 –¥–ª–∏–Ω–æ–π 8..40
    match = re.search(r"[A-Z0-9]{8,40}", text_upper)
    if match:
        candidate = match.group(0)
        return candidate if is_valid_track_number(candidate) else None
    return None


async def require_code_or_hint(message: types.Message) -> Optional[str]:
    code = get_user_code(message.from_user.id)
    if not code:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return None
    return code


@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    welcome = (
        "üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞.\n"
        "–ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é."
    )
    await message.answer(welcome, parse_mode="HTML", reply_markup=get_main_menu_inline())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.callback_query_handler(lambda c: c.data == "menu_getcod", state="*")
@dp.message_handler(commands=["getcod"], state="*")
async def menu_getcod(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        code = get_or_create_user_code(user_id)

    await tgt.answer(f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", parse_mode="HTML")
    await tgt.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_address", state="*")
@dp.message_handler(commands=["adress"], state="*")
async def menu_address(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    await tgt.answer(CHINA_WAREHOUSE_ADDRESS.format(client_code=code), parse_mode="HTML")
    await tgt.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_mytracks", state="*")
@dp.message_handler(commands=["mycod"], state="*")
async def menu_mytracks(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    tracks = get_tracks(user_id)
    text = f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n" + ("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
    await tgt.answer(text, parse_mode="HTML")
    await tgt.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_manager", state="*")
@dp.message_handler(commands=["manager"], state="*")
async def menu_manager(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user = cb_or_msg.from_user
    else:
        tgt = cb_or_msg
        user = cb_or_msg.from_user

    code = get_user_code(user.id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    full_name = user.full_name or ""
    username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if MANAGER_ID:
        try:
            text = (
                "üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{user.id}</code>\n"
            )
            await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await tgt.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_buy", state="*")
@dp.message_handler(commands=["buy"], state="*")
async def menu_buy(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    await tgt.answer("üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
    code = await require_code_or_hint(message)
    if not code:
        await state.finish()
        return

    text = message.caption or message.text or ""
    if len(text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
        return

    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    notify = (
        "üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
    )
    if MANAGER_ID:
        try:
            if message.photo:
                await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
            else:
                await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)

    await state.finish()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_sendtrack", state="*")
@dp.message_handler(commands=["sendtrack"], state="*")
async def menu_sendtrack(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    tracks = get_tracks(user_id)
    if tracks:
        await tgt.answer("üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks), parse_mode="HTML")
    await tgt.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await TrackStates.waiting_for_track.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.message_handler(state=TrackStates.waiting_for_track, content_types=ContentType.TEXT)
async def handle_track_input(message: types.Message, state: FSMContext):
    code = await require_code_or_hint(message)
    if not code:
        await state.finish()
        return

    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return

    await state.update_data(track=track)
    await TrackStates.choosing_delivery.set()
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç: <code>{track}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="HTML",
        reply_markup=delivery_keyboard(),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=TrackStates.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "delivery_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    delivery_key = callback.data.replace("delivery_", "")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(delivery=delivery_key)

    data = await state.get_data()
    track = data["track"]

    await TrackStates.confirming.set()
    await callback.message.edit_text(
        f"üì¶ –¢—Ä–µ–∫: <code>{track}</code>\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        parse_mode="HTML",
        reply_markup=confirm_keyboard(),
    )


@dp.callback_query_handler(lambda c: c.data in ("confirm_track", "confirm_cancel"), state=TrackStates.confirming)
async def confirm_track(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "confirm_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    user_id = callback.from_user.id
    code = get_user_code(user_id)
    if not code:
        await state.finish()
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    data = await state.get_data()
    track = data["track"]
    delivery_key = data["delivery"]
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    add_track(user_id, track, delivery_name)

    tracks = get_tracks(user_id)
    full_name = callback.from_user.full_name or ""
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if WAREHOUSE_ID:
        try:
            text = (
                "üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ö–û–î</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{user_id}</code>\n\n"
                f"üìã –¢—Ä–µ–∫: <code>{track}</code>\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
                "üìö –í—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + format_tracks(tracks)
            )
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse: %s", e)

    await state.finish()
    await callback.message.edit_text(
        "‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞.\n\n"
        "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        parse_mode="HTML",
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_photokontrol", state="*")
@dp.message_handler(commands=["photo", "photos"], state="*")
async def menu_photokontrol(cb_or_msg, state: FSMContext):
    await state.finish()
    if isinstance(cb_or_msg, CallbackQuery):
        await bot.answer_callback_query(cb_or_msg.id)
        tgt = cb_or_msg.message
        user_id = cb_or_msg.from_user.id
    else:
        tgt = cb_or_msg
        user_id = cb_or_msg.from_user.id

    code = get_user_code(user_id)
    if not code:
        await tgt.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return

    user_tracks = get_tracks(user_id)
    if user_tracks:
        await tgt.answer("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫–∏:\n\n" + format_tracks(user_tracks), parse_mode="HTML")
    await tgt.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await PhotoStates.waiting_for_track.set()


@dp.message_handler(state=PhotoStates.waiting_for_track, content_types=ContentType.TEXT)
async def handle_photo_request(message: types.Message, state: FSMContext):
    code = await require_code_or_hint(message)
    if not code:
        await state.finish()
        return

    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return

    photos = get_track_photos(track)
    if not photos:
        await state.finish()
        await message.answer(
            f"üì≠ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É <code>{track}</code> –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            parse_mode="HTML",
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    first = True
    for file_id in photos:
        try:
            caption = f"üì∑ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É: <code>{track}</code>" if first else None
            await bot.send_photo(message.chat.id, file_id, caption=caption, parse_mode="HTML")
            first = False
        except Exception as e:
            logger.exception("Failed to send track photo to user: %s", e)

    await state.finish()
    await message.answer("‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.message_handler(content_types=[ContentType.PHOTO], state="*")
async def warehouse_photo_upload(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–∫–ª–∞–¥–∞
    if message.from_user.id != WAREHOUSE_ID:
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç—Ä–µ–∫ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑ —Ä–µ–ø–ª–∞—è
    track = extract_track_from_text(message.caption)
    if not track and message.reply_to_message:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        track = extract_track_from_text(getattr(message.reply_to_message, "text", None) or getattr(message.reply_to_message, "caption", None))

    if not track:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥. –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫ –≤ –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AB123456789CN) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º."
        )
        return

    track = track.upper()
    file_id = message.photo[-1].file_id

    try:
        add_track_photo(track, file_id, uploaded_by=message.from_user.id, caption=message.caption)
    except Exception as e:
        logger.exception("Failed to save track photo: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —ç—Ç–æ—Ç —Ç—Ä–µ–∫
    user_ids = find_user_ids_by_track(track)
    sent_count = 0
    for uid in set(user_ids):
        try:
            await bot.send_photo(uid, file_id, caption=f"üì∑ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É: <code>{track}</code>", parse_mode="HTML")
            sent_count += 1
        except Exception as e:
            logger.exception("Failed to deliver track photo to user %s: %s", uid, e)

    if sent_count > 0:
        await message.answer(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∫–ª–∏–µ–Ω—Ç—É(–∞–º).")
    else:
        await message.answer(
            "‚ÑπÔ∏è –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ö–ª–∏–µ–Ω—Ç—ã –ø–æ —ç—Ç–æ–º—É —Ç—Ä–µ–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫, –æ–Ω —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ."
        )


@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


async def on_startup(dp: Dispatcher):
    init_db()
    try:
        # –ß–∏—Å—Ç–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        from aiogram.types import (
            BotCommandScopeDefault,
            BotCommandScopeAllPrivateChats,
            BotCommandScopeAllGroupChats,
            BotCommandScopeAllChatAdministrators,
        )
        for scope in [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllGroupChats(),
            BotCommandScopeAllChatAdministrators(),
        ]:
            try:
                await bot.delete_my_commands(scope=scope)
            except Exception:
                pass
        try:
            await bot.delete_my_commands()
        except Exception:
            pass
    except Exception:
        pass

    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        pass


async def on_shutdown(dp: Dispatcher):
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
