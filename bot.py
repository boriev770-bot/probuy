import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN", "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7095008192"))
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "123456789"))
WAREHOUSE_ADDRESS = os.getenv(
    "WAREHOUSE_ADDRESS",
    "–¢–£–¢_–£–ö–ê–ñ–ò_–ê–î–†–ï–°_–°–ö–õ–ê–î–ê_–í_–ö–ò–¢–ê–ï\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ...\n–¢–µ–ª–µ—Ñ–æ–Ω: ...\n–ê–¥—Ä–µ—Å: ..."
)

CLIENTS_FILE = "clients.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
if not os.path.exists(CLIENTS_FILE):
    with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

def load_clients():
    with open(CLIENTS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_clients(data):
    with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# FAQ
FAQ = {
    r"(—Å–¥–µ–ª–∞.*|–∑–∞–∫–∞–∑.*)": "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –≤ –±–æ—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
    r"(—Å–∫–æ–ª—å.*|—Å—Ç–æ–∏.*|–¥–æ—Å—Ç–∞–≤–∫.*—Ü–µ–Ω–∞.*|—Ü–µ–Ω–∞.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∏—Å—Ö–æ–¥—è –∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–µ—Å–∞ –≥—Ä—É–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è",
    r"(–≤—Ä–µ–º—è.*|—Å—Ä–æ–∫.*|–∫–æ–≥–¥–∞.*–ø—Ä–∏–¥–µ—Ç.*|—á–µ—Ä–µ–∑.*–¥–Ω–µ–π.*|—Å—Ä–æ–∫–∏.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: –±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ ‚Äî 10-15 –¥–Ω–µ–π, –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ ‚Äî 15-20 –¥–Ω–µ–π (–¥–æ —Ä—ã–Ω–∫–∞ –Æ–∂–Ω—ã–µ –í–æ—Ä–æ—Ç–∞, –ú–æ—Å–∫–≤–∞)."
}

def find_best_match(user_text):
    user_text = user_text.lower()
    best_match = None
    best_score = 0
    for pattern, answer in FAQ.items():
        match = re.findall(pattern, user_text)
        if match:
            score = sum(len(m) for m in match)
            if score > best_score:
                best_score = score
                best_match = answer
    return best_match

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?' –∏–ª–∏ '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?'\n"
        "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ ‚Äî –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/getcod ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/adress ‚Äî –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n"
        "/manager ‚Äî –≤—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
    )

@dp.message_handler(commands=['getcod'])
async def getcod(message: types.Message):
    clients = load_clients()
    user_id = str(message.from_user.id)
    if user_id in clients and "code" in clients[user_id]:
        code = clients[user_id]["code"]
    else:
        last_num = max([int(v["code"][2:]) for v in clients.values() if "code" in v] or [0])
        new_num = last_num + 1
        code = f"PR{new_num:05d}"
        clients[user_id] = {"code": code, "tracks": []}
        save_clients(clients)
    await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {code}")

@dp.message_handler(commands=['adress'])
async def adress(message: types.Message):
    await message.answer(f"üì¶ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n{WAREHOUSE_ADDRESS}")

@dp.message_handler(commands=['sendtrack'])
async def sendtrack(message: types.Message):
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:")
    dp.register_message_handler(get_track, state=None)

async def get_track(message: types.Message):
    track = message.text.strip()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"), KeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    dp.register_message_handler(lambda m: get_delivery_method(m, track), state=None)

async def get_delivery_method(message: types.Message, track):
    delivery = message.text.strip()
    clients = load_clients()
    user_id = str(message.from_user.id)
    if user_id not in clients:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é /getcod")
        return
    code = clients[user_id]["code"]
    clients[user_id]["tracks"].append({"track": track, "delivery": delivery})
    save_clients(clients)

    await bot.send_message(
        WAREHOUSE_ID,
        f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏:\n–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {code}\n–¢—Ä–µ–∫: {track}\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery}"
    )
    await message.answer("‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=['manager'])
async def manager(message: types.Message):
    await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n–ò–º—è: {message.from_user.full_name}\nUsername: @{message.from_user.username or '–Ω–µ—Ç'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: /manager"
    )

@dp.message_handler(commands=['broadcast'])
async def broadcast(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")
        return
    clients = load_clients()
    for uid in clients.keys():
        try:
            await bot.send_message(uid, text)
        except:
            pass
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.message_handler()
async def search_answer(message: types.Message):
    text = message.text.lower()
    if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in text:
        await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.")
        await bot.send_message(
            ADMIN_ID,
            f"üì© –ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n–ò–º—è: {message.from_user.full_name}\nUsername: @{message.from_user.username or '–Ω–µ—Ç'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        return
    response = find_best_match(text)
    if response:
        await message.answer(response)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.")

if __name__ == '__main__':
    asyncio.run(dp.start_polling())
