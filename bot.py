import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192  # –í–∞—à ID –≤ Telegram
WAREHOUSE_ID = 7095008192 # ID —á–∞—Ç–∞ —Å–∫–ª–∞–¥–∞
DATA_FILE = "data.json"

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

# –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def get_user_data(user_id, message=None):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        data[user_id] = {
            "code": f"PR{last_code + 1:05d}",
            "tracks": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "state": None
        }
        save_data(data)
    return data[user_id]

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = await get_user_data(message.from_user.id, message)
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à –∫–æ–¥: {user['code']}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –≤–∞—à –∫–æ–¥\n"
        "/mytracks - –≤–∞—à–∏ —Ç—Ä–µ–∫–∏\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['mycod'])
async def cmd_mycod(message: types.Message):
    user = await get_user_data(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –∫–æ–¥: {user['code']}")

@dp.message_handler(commands=['mytracks'])
async def cmd_mytracks(message: types.Message):
    user = await get_user_data(message.from_user.id)
    if not user['tracks']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤")
        return
    
    tracks = "\n".join(f"{i+1}. {t['track']}" for i, t in enumerate(user['tracks']))
    await message.answer(f"üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫–∏:\n{tracks}")

@dp.message_handler(commands=['adress'])
async def cmd_adress(message: types.Message):
    user = await get_user_data(message.from_user.id)
    address = CHINA_WAREHOUSE_ADDRESS.format(user_code=user['code'])
    await message.answer(f"üè≠ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:\n{address}")

@dp.message_handler(commands=['sendtrack'])
async def cmd_sendtrack(message: types.Message):
    user = await get_user_data(message.from_user.id)
    user['state'] = UserStates.WAITING_FOR_TRACK
    save_data(load_data())  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: AB123456789CD)")

@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if data.get(user_id, {}).get('state') != UserStates.WAITING_FOR_TRACK:
        return
    
    track = message.text.upper()
    user = data[user_id]
    user['tracks'].append({
        "track": track,
        "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })
    user['state'] = None
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥
    await bot.send_message(
        WAREHOUSE_ID,
        f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç {user['full_name']}\n"
        f"–ö–æ–¥: {user['code']}\n"
        f"–¢—Ä–µ–∫: {track}\n"
        f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {len(user['tracks'])}"
    )
    
    await message.answer(f"‚úÖ –¢—Ä–µ–∫ {track} –¥–æ–±–∞–≤–ª–µ–Ω!")

@dp.message_handler(commands=['buy'])
async def cmd_buy(message: types.Message):
    user = await get_user_data(message.from_user.id)
    user['state'] = UserStates.WAITING_FOR_ORDER
    save_data(load_data())
    
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ:\n- –ù–∞–∑–≤–∞–Ω–∏–µ\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n- –°—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)")

@dp.message_handler(content_types=ContentType.TEXT)
async def handle_order(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if data.get(user_id, {}).get('state') == UserStates.WAITING_FOR_ORDER:
        user = data[user_id]
        await bot.send_message(
            ADMIN_ID,
            f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user['full_name']}\n"
            f"–ö–æ–¥: {user['code']}\n\n"
            f"–ó–∞–∫–∞–∑:\n{message.text}"
        )
        user['state'] = None
        save_data(data)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É")

@dp.message_handler(commands=['manager'])
async def cmd_manager(message: types.Message):
    user = await get_user_data(message.from_user.id)
    await bot.send_message(
        ADMIN_ID,
        f"üìû –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ –æ—Ç {user['full_name']}\n"
        f"–ö–æ–¥: {user['code']}\n"
        f"Username: @{message.from_user.username or '–Ω–µ—Ç'}"
    )
    await message.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
