import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
USERS_FILE = "users.txt"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
waiting_for_order = set()
active_users = set()
user_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö

FAQ = {
    r"(?i)\b(—Å–¥–µ–ª–∞—Ç—å|–∑–∞–∫–∞–∑|–∑–∞–∫–∞–∑–∞—Ç—å|–æ—Ñ–æ—Ä–º–∏—Ç—å)\b": 
        "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ üí¨",
    r"(?i)\b(—Å–∫–æ–ª—å–∫–æ|—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞|—Å—Ç–æ–∏—Ç|–¥–æ—Å—Ç–∞–≤–∫–∞)\b": 
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
    r"(?i)\b(–≤—Ä–µ–º—è|—Å—Ä–æ–∫|–∫–æ–≥–¥–∞|–¥–Ω–µ–π|—Å—Ä–æ–∫–∏|–¥–æ—Å—Ç–∞–≤—è—Ç)\b": 
        "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: 10-20 –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ (–¥–æ –ú–æ—Å–∫–≤—ã)."
}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

def save_user(user_id, username=None, first_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    if user_id not in active_users:
        active_users.add(user_id)
        user_data[user_id] = {
            'username': username,
            'first_name': first_name,
            'last_activity': asyncio.get_event_loop().time()
        }
        with open(USERS_FILE, 'a') as f:
            f.write(f"{user_id},{username or ''},{first_name or ''}\n")

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(USERS_FILE):
        return
        
    with open(USERS_FILE, 'r') as f:
        for line in f:
            if line.strip():
                parts = line.strip().split(',')
                if len(parts) >= 3:
                    user_id, username, first_name = parts[0], parts[1], parts[2]
                    active_users.add(user_id)
                    user_data[user_id] = {
                        'username': username if username else None,
                        'first_name': first_name if first_name else None
                    }

def find_best_match(text):
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ"""
    if not text:
        return None
    text = text.lower()
    for pattern, answer in FAQ.items():
        if re.search(pattern, text):
            return answer
    return None

async def notify_admin(message: types.Message, message_type="–∑–∞–ø—Ä–æ—Å"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞"""
    user = message.from_user
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", 
        callback_data=f"reply_{user.id}"
    ))
    
    caption = (
        f"üì¢ –ù–æ–≤—ã–π {message_type}!\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üîó Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
    )
    
    if message.text:
        caption += f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        await bot.send_message(ADMIN_ID, caption, reply_markup=markup)
    elif message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, 
                           caption=caption, reply_markup=markup)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, 
                              caption=caption, reply_markup=markup)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "–ó–∞–∫–∞–∑–∞—Ç—å - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "'–æ–ø–µ—Ä–∞—Ç–æ—Ä' - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –∑–∞–∫–∞–∑–µ!"
    )

@dp.message_handler(commands=['buy'])
async def ask_order(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)
    waiting_for_order.add(user.id)
    await message.answer(
        "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        "–û–ø–∏—à–∏—Ç–µ:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç"
    )

@dp.message_handler(Command('broadcast'), user_id=ADMIN_ID)
async def broadcast(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ /broadcast –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    users = [uid for uid in active_users if uid in user_data]
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    await message.answer(f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success = 0
    for user_id in users:
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.reply_to_message.message_id
            )
            success += 1
            await asyncio.sleep(0.1)
        except:
            continue
    
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}")

@dp.callback_query_handler(lambda c: c.data.startswith('reply_'))
async def process_reply(callback: types.CallbackQuery):
    user_id = callback.data.split('_')[1]
    await callback.message.answer(
        f"‚úèÔ∏è –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:"
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å user_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_text(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)
    text = message.text.lower()

    if user.id in waiting_for_order:
        await notify_admin(message, "–∑–∞–∫–∞–∑")
        waiting_for_order.remove(user.id)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return

    if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in text:
        await notify_admin(message, "–∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("üîÑ –í–∞—Å —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!")
        return

    answer = find_best_match(text)
    if answer:
        await message.answer(answer)
    else:
        await message.answer(
            "‚ùì –Ø –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:\n"
            "- –°—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "- –°—Ä–æ–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "- –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Å–≤—è–∑–∏"
        )

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_media(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)

    if user.id in waiting_for_order:
        await notify_admin(message, "–∑–∞–∫–∞–∑ —Å –º–µ–¥–∏–∞")
        await message.answer("üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.")
    else:
        await message.answer("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_users()

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
