import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
WAREHOUSE_ID = 7095008192  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–∞

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

# –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
DELIVERY_OPTIONS = {
    "üöó –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ": "–ë—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ–¥–æ—Å—Ç–∞–≤–∫–∞ (10-15 –¥–Ω–µ–π)",
    "üöõ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ": "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–¥–æ—Å—Ç–∞–≤–∫–∞ (15-20 –¥–Ω–µ–π)",
    "‚úàÔ∏è –ê–≤–∏–∞": "–ê–≤–∏–∞–¥–æ—Å—Ç–∞–≤–∫–∞ (5-7 –¥–Ω–µ–π)",
    "üöÇ –ñ–î": "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (18-25 –¥–Ω–µ–π)"
}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return {}
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class TrackNumberStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_DELIVERY = "waiting_for_delivery"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–±–æ—Ä–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/getcod - –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcod
@dp.message_handler(commands=['getcod'])
async def get_code(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        
        data[user_id] = {
            "code": new_code,
            "tracks": [],
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
            "state": None
        }
        save_data(data)
        
        await message.answer(
            f"‚úÖ –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä: {new_code}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n"
            f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: /adress"
        )
    else:
        await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä: {data[user_id]['code']}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adress
@dp.message_handler(commands=['adress'])
async def send_address(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id in data:
        address = CHINA_WAREHOUSE_ADDRESS.format(user_code=data[user_id]['code'])
    else:
        address = CHINA_WAREHOUSE_ADDRESS.format(user_code="PR00000 (–ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ /getcod)")
    
    await message.answer(
        f"üè≠ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n\n{address}\n\n"
        "–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendtrack
@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /getcod")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    data[user_id]['state'] = TrackNumberStates.WAITING_FOR_DELIVERY
    save_data(data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [KeyboardButton(option) for option in DELIVERY_OPTIONS.keys()]
    kb.add(*buttons)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(lambda m: m.text in DELIVERY_OPTIONS.keys())
async def process_delivery_choice(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /getcod")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
    data[user_id]['delivery_choice'] = message.text
    data[user_id]['state'] = TrackNumberStates.WAITING_FOR_TRACK
    save_data(data)
    
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {DELIVERY_OPTIONS[message.text]}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')  # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
async def handle_track_number(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /getcod")
        return
    
    if data[user_id].get('state') != TrackNumberStates.WAITING_FOR_TRACK:
        return
    
    track = message.text.upper().strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –±–∞–∑—É
    data[user_id]["tracks"].append({
        "track": track,
        "delivery": data[user_id]['delivery_choice'],
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    data[user_id]['state'] = None
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥
    await bot.send_message(
        WAREHOUSE_ID,
        f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä!\n"
        f"–ö–ª–∏–µ–Ω—Ç: {data[user_id]['full_name']}\n"
        f"–ö–æ–¥: {data[user_id]['code']}\n"
        f"–¢—Ä–µ–∫: {track}\n"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {DELIVERY_OPTIONS[data[user_id]['delivery_choice']]}\n"
        f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞: {len(data[user_id]['tracks'])}"
    )
    
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {DELIVERY_OPTIONS[data[user_id]['delivery_choice']]}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π /sendtrack"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_text(message: types.Message):
    text = message.text.lower()
    user_id = str(message.from_user.id)
    data = load_data()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if text == "–æ–ø–µ—Ä–∞—Ç–æ—Ä":
        await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        await bot.send_message(
            ADMIN_ID,
            f"üì© –ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n"
            f"–ö–ª–∏–µ–Ω—Ç: {message.from_user.full_name}\n"
            f"Username: @{message.from_user.username or '–Ω–µ—Ç'}\n"
            f"–ö–æ–¥: {data.get(user_id, {}).get('code', '–Ω–µ—Ç –∫–æ–¥–∞')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ regexp
    if user_id in data and data[user_id].get('state') == TrackNumberStates.WAITING_FOR_TRACK:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.")

if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_data({})
        
    executor.start_polling(dp, skip_updates=True)
