import os
import logging
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import init_db, get_or_create_user_code, get_tracks, add_track


# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")
logging.info("RUNNING FILE: %s", os.path.abspath(__file__))


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")


# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
CHINA_WAREHOUSE_ADDRESS = (
    "üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>\n\n"
    "‚¨áÔ∏è –í–°–¢–ê–í–¨–¢–ï –ù–ò–ñ–ï –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° –°–ö–õ–ê–î–ê (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) ‚¨áÔ∏è\n"
    "<i>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è ..., –≥. ..., —Ä–∞–π–æ–Ω ..., —É–ª. ..., —Å–∫–ª–∞–¥ ‚Ññ...</i>\n\n"
    "üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>\n"
)


# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TrackStates(StatesGroup):
    waiting_for_track = State()
    choosing_delivery = State()
    confirming = State()


class BuyStates(StatesGroup):
    waiting_for_details = State()


# –ú–µ–Ω—é (ReplyKeyboard)
def get_main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å"),
        KeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"),
        KeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"),
        KeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å"),
        KeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"),
        KeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏"),
    )
    return kb


# –î–æ—Å—Ç–∞–≤–∫–∞ (Inline)
DELIVERY_TYPES = {
    "fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"},
    "slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"},
    "rail": {"name": "üöÇ –ñ–î"},
    "air": {"name": "‚úàÔ∏è –ê–≤–∏–∞"},
}


def delivery_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for key, info in DELIVERY_TYPES.items():
        kb.add(InlineKeyboardButton(info["name"], callback_data=f"delivery_{key}"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))
    return kb


def confirm_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_track"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
    )
    return kb


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
    if not tracks:
        return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    lines: List[str] = []
    for idx, (track, delivery) in enumerate(tracks, start=1):
        suffix = f" ({delivery})" if delivery else ""
        lines.append(f"{idx}. <code>{track}</code>{suffix}")
    return "\n".join(lines)


def is_valid_track_number(text: str) -> bool:
    t = (text or "").strip().upper()
    if len(t) < 8 or len(t) > 40:
        return False
    return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


# –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é

@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    welcome = (
        f"üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(welcome, parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", state="*")
@dp.message_handler(commands=["getcod"], state="*")
async def cmd_getcod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å", state="*")
@dp.message_handler(commands=["adress"], state="*")
async def cmd_address(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(CHINA_WAREHOUSE_ADDRESS.format(client_code=code), parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", state="*")
@dp.message_handler(commands=["mycod"], state="*")
async def cmd_mycod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    text = f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n" + ("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", state="*")
@dp.message_handler(commands=["manager"], state="*")
async def cmd_manager(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if MANAGER_ID:
        try:
            text = (
                "üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n"
            )
            await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=get_main_menu())


@dp.message_handler(lambda m: m.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å", state="*")
@dp.message_handler(commands=["buy"], state="*")
async def cmd_buy(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel",
        reply_markup=get_main_menu(),
    )
    await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
    text = message.caption or message.text or ""
    if len(text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
        return
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    notify = (
        "üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
    )
    if MANAGER_ID:
        try:
            if message.photo:
                await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
            else:
                await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await state.finish()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=get_main_menu())


@dp.message_handler(lambda m: m.text == "üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", state="*")
@dp.message_handler(commands=["sendtrack"], state="*")
async def cmd_sendtrack(message: types.Message, state: FSMContext):
    await state.finish()
    get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    if tracks:
        await message.answer("üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks), parse_mode="HTML")
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await TrackStates.waiting_for_track.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())


# –í–≤–æ–¥ —Ç—Ä–µ–∫–∞ ‚Üí –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=TrackStates.waiting_for_track, content_types=ContentType.TEXT)
async def handle_track_input(message: types.Message, state: FSMContext):
    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return
    await state.update_data(track=track)
    await TrackStates.choosing_delivery.set()
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç: <code>{track}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="HTML",
        reply_markup=delivery_keyboard(),
    )


# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=TrackStates.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "delivery_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    delivery_key = callback.data.replace("delivery_", "")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(delivery=delivery_key)

    state_data = await state.get_data()
    track = state_data["track"]

    await TrackStates.confirming.set()
    await callback.message.edit_text(
        f"üì¶ –¢—Ä–µ–∫: <code>{track}</code>\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        parse_mode="HTML",
        reply_markup=confirm_keyboard(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data in ("confirm_track", "confirm_cancel"), state=TrackStates.confirming)
async def confirm_track(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "confirm_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    # confirm_track
    data = await state.get_data()
    track = data["track"]
    delivery_key = data["delivery"]
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    add_track(callback.from_user.id, track, delivery_name)

    # –ò–Ω—Ñ–æ –¥–ª—è —Å–∫–ª–∞–¥–∞
    code = get_or_create_user_code(callback.from_user.id)
    tracks = get_tracks(callback.from_user.id)
    full_name = callback.from_user.full_name or ""
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if WAREHOUSE_ID:
        try:
            text = (
                "üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ö–û–î</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{callback.from_user.id}</code>\n\n"
                f"üìã –¢—Ä–µ–∫: <code>{track}</code>\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
                "üìö –í—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + format_tracks(tracks)
            )
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse: %s", e)

    await state.finish()
    await callback.message.edit_text(
        "‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞.\n\n"
        "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        parse_mode="HTML",
    )
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())


# –§–æ–ª–ª–±—ç–∫
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=get_main_menu())


# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
async def on_startup(dp: Dispatcher):
    init_db()
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        pass


async def on_shutdown(dp: Dispatcher):
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
