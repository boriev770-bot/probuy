–≤–æ—Ç —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å Deploy
Custom Start Command
Command that will be run to start new deployments. Docs‚Üó
Start command
bash start.sh
Add pre-deploy step (Docs‚Üó)
Thought for 15s
–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ Railway –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ python bot.py, –∞ —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ ‚ÄúCustom Start Command‚Äù: bash start.sh. –ò–∑‚Äë–∑–∞ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Å–∫—Ä–∏–ø—Ç/—Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª.

–°–¥–µ–ª–∞–π —Ç–∞–∫, –æ—á–µ–Ω—å –ø–æ —à–∞–≥–∞–º.

–°–ø–æ—Å–æ–± 1 (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π): –∑–∞–ø—É—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é python bot.py

–û—Ç–∫—Ä–æ–π Railway ‚Üí Project ‚Üí —Ç–≤–æ–π Service.
–ü–µ—Ä–µ–π–¥–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É Deploy (—Ç–∞–º –≥–¥–µ ‚ÄúCustom Start Command‚Äù).
–í –ø–æ–ª–µ ‚ÄúStart command‚Äù –∑–∞–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç:
–±—ã–ª–æ: bash start.sh
–Ω—É–∂–Ω–æ: python bot.py
–ù–∞–∂–º–∏ Save/Deploy.
–î–∞–ª—å—à–µ: Settings ‚Üí Rebuild without cache (–∏–ª–∏ Clear cache ‚Üí Deploy).
–û—Ç–∫—Ä–æ–π Logs –∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–∏–¥–∏—à—å —Å—Ç—Ä–æ–∫–∏:
RUNNING FILE: /app/bot.py
Start polling.
–°–ø–æ—Å–æ–± 2: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Procfile (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è –±–æ—Ç–∞ –∫–∞–∫ worker)

–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –µ—Å—Ç—å —Ñ–∞–π–ª Procfile —Å–æ —Å—Ç—Ä–æ–∫–æ–π:
worker: python bot.py
–í Railway: –≤ Deploy ‚Üí –ø–æ–ª–µ ‚ÄúStart command‚Äù –û–ß–ò–°–¢–ò (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º), —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è Procfile.
–ï—Å–ª–∏ –±–æ—Ç –ª–µ–∂–∏—Ç –Ω–µ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ, –∑–∞–π–¥–∏ –≤ Service ‚Üí Settings ‚Üí Monorepo ‚Üí Root Directory –∏ —É–∫–∞–∂–∏ –ø–∞–ø–∫—É, –≥–¥–µ –ª–µ–∂–∞—Ç bot.py –∏ Procfile.
Settings ‚Üí Rebuild without cache ‚Üí Deploy.
–í Logs —Å–º–æ—Ç—Ä–∏ –∑–∞–ø—É—Å–∫.
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å web (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

–í Procfile –ø–æ—Å—Ç–∞–≤—å web: python bot.py –∏ –¥–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ bot.py –º–∞–ª–µ–Ω—å–∫–∏–π HTTP‚Äë—Å–µ—Ä–≤–µ—Ä (healthcheck), —á—Ç–æ–±—ã Railway –Ω–µ –≥–∞—Å–∏–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:
import os, threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
def run_healthcheck():
    port = int(os.getenv("PORT", "8080"))
    HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler).serve_forever()
threading.Thread(target=run_healthcheck, daemon=True).start()
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å start.sh:

–û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª start.sh –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –∑–∞–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞:
#!/usr/bin/env bash
set -euo pipefail
python bot.py
–í Railway ‚Üí Deploy ‚Üí ‚ÄúStart command‚Äù –æ—Å—Ç–∞–≤—å bash start.sh (–∫–∞–∫ —É —Ç–µ–±—è), –Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ Rebuild without cache.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

Variables (Service ‚Üí Settings ‚Üí Variables):
BOT_TOKEN: —Ç–≤–æ–π —Ç–æ–∫–µ–Ω (—Å—Ç—Ä–æ–∫–∞ –∏–∑ BotFather, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
MANAGER_ID: 7095008192
WAREHOUSE_ID: 7095008192
requirements.txt: aiogram==2.25.1
–í bot.py –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è:
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
–ù–∏–≥–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å dp = Dispatcher(7095008192).
–ö–∞–∫ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª

–í –Ω–∞—á–∞–ª–µ bot.py –æ—Å—Ç–∞–≤—å —Å—Ç—Ä–æ–∫–∏:
import os, logging
logging.basicConfig(level=logging.INFO)
logging.info(f"RUNNING FILE: {os.path.abspath(__file__)}")
–í Logs —É–≤–∏–¥–∏—à—å: RUNNING FILE: /app/bot.py
–ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:

–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã Deploy —Å ‚ÄúStart command‚Äù, —Å–∫—Ä–∏–Ω Variables –∏ –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ bot.py. –Ø —Å–∫–∞–∂—É, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å.
–≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç 
Thought for 3s
–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –≤—Å—ë –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å.

–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
–í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ CHINA_WAREHOUSE_ADDRESS –≤ bot.py.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram: /start, /getcod, /adress, /sendtrack, /buy, /mycod, /manager.
–ù–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤ Railway Variables.
–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Volume (–∏–ª–∏ –≤—ã–Ω–µ—Å–µ–º –ë–î –≤ PostgreSQL ‚Äî –º–æ–≥—É –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å).
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ Railway ‚Üí Logs; –ø—Ä–∏ –ø—Ä–∞–≤–∫–∞—Ö –¥–µ–ª–∞–π—Ç–µ Rebuild without cache.
–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤, –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, inline‚Äë–∫–Ω–æ–ø–∫–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)? –°–∫–∞–∂–∏—Ç–µ ‚Äî —Å–¥–µ–ª–∞—é.

–≤ –ª–æ–≥–∞—Ö —ç—Ç–æ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç 
2025-08-23 22:40:31,140 INFO aiogram: Bot: Probuy bot [@Probuychine_bot]

2025-08-23 22:40:31,146 WARNING aiogram: Updates were skipped successfully.

2025-08-23 22:40:31,168 INFO aiogram.dispatcher.dispatcher: Start polling.
Thought for 6s
–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.

INFO Bot ‚Ä¶: –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.
WARNING Updates were skipped successfully.: —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –∫–æ–¥–µ —Å—Ç–æ–∏—Ç skip_updates=True ‚Äî –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ø–∏–ª–∏—Å—å, –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ.
INFO Start polling.: –±–æ—Ç —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
–•–æ—á–µ—à—å –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã? –ü–æ–º–µ–Ω—è–π –∑–∞–ø—É—Å–∫ –Ω–∞:

executor.start_polling(dp, skip_updates=False, on_startup=on_startup, on_shutdown=on_shutdown)
–ù–æ –æ–±—ã—á–Ω–æ skip_updates=True ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ‚Äú–∑–∞–ª–ø–∞‚Äù —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è.

–º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤ –±–æ—Ç–µ ? 
Thought for 11s
–î–∞. –ï—Å—Ç—å –¥–≤–∞ —É–¥–æ–±–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–º–æ–∂–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å):

–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard): –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —á–∞—Ç–∞
–ü—Ä–µ–¥–ª–∞–≥–∞—é: "üîë –ö–æ–¥", "üìç –ê–¥—Ä–µ—Å", "üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", "üöö –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", "üõí –ó–∞–∫–∞–∑–∞—Ç—å", "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä".
–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (InlineKeyboard): –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
–ü—Ä–∏–º–µ—Ä—ã: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äú–ü–æ–∫–∞–∑–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å‚Äù, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.
–°–∫–∞–∂–∏:

–ö–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é?
–ù—É–∂–Ω—ã –ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–æ–≤ (–∏—Å—Ç–æ—Ä–∏—è, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏) –∏ –∑–∞–∫–∞–∑–∞?
–û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–∏ –∏–∫–æ–Ω–∫–∏/–ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å?
—Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –∑–∞–∫–∞–∑–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥, –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫, –º–æ–∏ —Ç—Ä–µ–∫–∏. –∏–∫–æ–Ω–∫–∏ –º–æ–∂–µ—à—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º.
–¥–∞–≤–∞–π –ø–æ—Å–ª–µ —Ç—Ä–µ–∫–∞ –¥–æ–±–∞–≤–∏–º –µ—â–µ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ, –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ, –∂–¥, –∞–≤–∏–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
Thought for 22s
–ì–æ—Ç–æ–≤–æ. –í–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bot.py —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é –∏ –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞.

# bot.py
import os
import logging
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import init_db, get_or_create_user_code, get_tracks, add_track


# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")
logging.info("RUNNING FILE: %s", os.path.abspath(__file__))


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")


# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
CHINA_WAREHOUSE_ADDRESS = (
    "üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>\n\n"
    "‚¨áÔ∏è –í–°–¢–ê–í–¨–¢–ï –ù–ò–ñ–ï –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° –°–ö–õ–ê–î–ê (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) ‚¨áÔ∏è\n"
    "<i>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è ..., –≥. ..., —Ä–∞–π–æ–Ω ..., —É–ª. ..., —Å–∫–ª–∞–¥ ‚Ññ...</i>\n\n"
    "üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>\n"
)


# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TrackStates(StatesGroup):
    waiting_for_track = State()
    choosing_delivery = State()
    confirming = State()


class BuyStates(StatesGroup):
    waiting_for_details = State()


# –ú–µ–Ω—é (ReplyKeyboard)
def get_main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å"),
        KeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"),
        KeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"),
        KeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å"),
        KeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"),
        KeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏"),
    )
    return kb


# –î–æ—Å—Ç–∞–≤–∫–∞ (Inline)
DELIVERY_TYPES = {
    "fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"},
    "slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"},
    "rail": {"name": "üöÇ –ñ–î"},
    "air": {"name": "‚úàÔ∏è –ê–≤–∏–∞"},
}


def delivery_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for key, info in DELIVERY_TYPES.items():
        kb.add(InlineKeyboardButton(info["name"], callback_data=f"delivery_{key}"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))
    return kb


def confirm_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_track"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
    )
    return kb


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
    if not tracks:
        return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    lines: List[str] = []
    for idx, (track, delivery) in enumerate(tracks, start=1):
        suffix = f" ({delivery})" if delivery else ""
        lines.append(f"{idx}. <code>{track}</code>{suffix}")
    return "\n".join(lines)


def is_valid_track_number(text: str) -> bool:
    t = (text or "").strip().upper()
    if len(t) < 8 or len(t) > 40:
        return False
    return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


# –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é

@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    welcome = (
        f"üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(welcome, parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", state="*")
@dp.message_handler(commands=["getcod"], state="*")
async def cmd_getcod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å", state="*")
@dp.message_handler(commands=["adress"], state="*")
async def cmd_address(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(CHINA_WAREHOUSE_ADDRESS.format(client_code=code), parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", state="*")
@dp.message_handler(commands=["mycod"], state="*")
async def cmd_mycod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    text = f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n" + ("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(lambda m: m.text == "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", state="*")
@dp.message_handler(commands=["manager"], state="*")
async def cmd_manager(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if MANAGER_ID:
        try:
            text = (
                "üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n"
            )
            await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=get_main_menu())


@dp.message_handler(lambda m: m.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å", state="*")
@dp.message_handler(commands=["buy"], state="*")
async def cmd_buy(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel",
        reply_markup=get_main_menu(),
    )
    await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
    text = message.caption or message.text or ""
    if len(text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
        return
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    notify = (
        "üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
    )
    if MANAGER_ID:
        try:
            if message.photo:
                await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
            else:
                await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await state.finish()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=get_main_menu())


@dp.message_handler(lambda m: m.text == "üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", state="*")
@dp.message_handler(commands=["sendtrack"], state="*")
async def cmd_sendtrack(message: types.Message, state: FSMContext):
    await state.finish()
    get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    if tracks:
        await message.answer("üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks), parse_mode="HTML")
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await TrackStates.waiting_for_track.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())


# –í–≤–æ–¥ —Ç—Ä–µ–∫–∞ ‚Üí –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=TrackStates.waiting_for_track, content_types=ContentType.TEXT)
async def handle_track_input(message: types.Message, state: FSMContext):
    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return
    await state.update_data(track=track)
    await TrackStates.choosing_delivery.set()
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç: <code>{track}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="HTML",
        reply_markup=delivery_keyboard(),
    )


# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=TrackStates.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "delivery_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    delivery_key = callback.data.replace("delivery_", "")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(delivery=delivery_key)

    state_data = await state.get_data()
    track = state_data["track"]

    await TrackStates.confirming.set()
    await callback.message.edit_text(
        f"üì¶ –¢—Ä–µ–∫: <code>{track}</code>\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        parse_mode="HTML",
        reply_markup=confirm_keyboard(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data in ("confirm_track", "confirm_cancel"), state=TrackStates.confirming)
async def confirm_track(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "confirm_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    # confirm_track
    data = await state.get_data()
    track = data["track"]
    delivery_key = data["delivery"]
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    add_track(callback.from_user.id, track, delivery_name)

    # –ò–Ω—Ñ–æ –¥–ª—è —Å–∫–ª–∞–¥–∞
    code = get_or_create_user_code(callback.from_user.id)
    tracks = get_tracks(callback.from_user.id)
    full_name = callback.from_user.full_name or ""
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if WAREHOUSE_ID:
        try:
            text = (
                "üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ö–û–î</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{callback.from_user.id}</code>\n\n"
                f"üìã –¢—Ä–µ–∫: <code>{track}</code>\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
                "üìö –í—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + format_tracks(tracks)
            )
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse: %s", e)

    await state.finish()
    await callback.message.edit_text(
        "‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞.\n\n"
        "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        parse_mode="HTML",
    )
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())


# –§–æ–ª–ª–±—ç–∫
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=get_main_menu())


# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
async def on_startup(dp: Dispatcher):
    init_db()
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        pass


async def on_shutdown(dp: Dispatcher):
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ó–∞–∫–∞–∑–∞—Ç—å, –ú–µ–Ω–µ–¥–∂–µ—Ä, –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥, –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å, –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫, –ú–æ–∏ —Ç—Ä–µ–∫–∏.
–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫–∞: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ, –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ, –ñ–î, –∞–≤–∏–∞) –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–∞ –∫–∞–∫ –º–Ω–µ —É–±—Ä–∞—Ç—å —Ç–æ –º–µ–Ω—é –≤ –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ 
Thought for 14s
–ú–æ–∂–Ω–æ. –≠—Ç–æ ¬´–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞¬ª (ReplyKeyboard). –ï—Å—Ç—å 3 –ø—Ä–æ—Å—Ç—ã—Ö —Å–ø–æ—Å–æ–±–∞.

–°–ø—Ä—è—Ç–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
–í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç:
from aiogram.types import ReplyKeyboardRemove
–¢–∞–º, –≥–¥–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
await message.answer("–ì–æ—Ç–æ–≤–æ, –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())
–í—Å–µ–≥–¥–∞ –±–µ–∑ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
–£–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä reply_markup=get_main_menu() –∏–∑ –≤—Å–µ—Ö message.answer(...).
–í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start —Ç–æ–∂–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π get_main_menu(), –∞ –¥–ª—è –≤–µ—Ä–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É —Å–ø—Ä—è—á—å:
await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardRemove())
–î–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ inline‚Äë–∫–Ω–æ–ø–∫–∏ (–º—ã –∏—Ö —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏).
–°–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
–î–æ–±–∞–≤—å —Ö—ç–Ω–¥–ª–µ—Ä:
@dp.message_handler(commands=["hide"])
async def cmd_hide(message: types.Message):
    from aiogram.types import ReplyKeyboardRemove
    await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())
–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É /hide.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –º–µ—à–∞–µ—Ç ¬´–∫–Ω–æ–ø–∫–∞ –ú–µ–Ω—é¬ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ /start, /help):

–≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Telegram. –ï–≥–æ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:
from aiogram.types import BotCommand
await bot.set_my_commands([])  # —É–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–µ–Ω—é
–ò—Ç–æ–≥–æ:

–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞—à—É –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardRemove.
–ß—Ç–æ–±—ã –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é ‚Äî –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º get_main_menu() –∏ –æ–¥–∏–Ω —Ä–∞–∑ —Å–ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
Inline‚Äë–∫–Ω–æ–ø–∫–∏ (–ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º) –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
—è —Ö–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å inline –º–µ–Ω—é, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –∞ —É–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–≤–∏–≥–∞–µ—Ç —à—Ç–æ—Ä–∫—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥ 
Thought for 13s
–ö–æ—Ä–æ—Ç–∫–æ: –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–Ω–æ–ø–∫—É ‚Äú–ú–µ–Ω—é‚Äù –Ω–µ–ª—å–∑—è, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—ë –ø—É—Å—Ç–æ–π. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É –±–æ—Ç–∞.

–°–¥–µ–ª–∞–π –æ–±–∞ —à–∞–≥–∞:

–í –∫–æ–¥–µ, –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –æ—á–∏—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
from aiogram.types import (
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllChatAdministrators,
)

async def on_startup(dp):
    init_db()
    for scope in [
        BotCommandScopeDefault(),
        BotCommandScopeAllPrivateChats(),
        BotCommandScopeAllGroupChats(),
        BotCommandScopeAllChatAdministrators(),
    ]:
        try:
            await bot.delete_my_commands(scope=scope)
        except Exception:
            pass
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å
–í @BotFather —É–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
–û—Ç–ø—Ä–∞–≤—å: /deletecommands
–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
–í—ã–±–µ—Ä–∏ ‚ÄúDefault‚Äù (–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ scope/—è–∑—ã–∫–∏)
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–¥–∞–ª–µ–Ω–∏–µ
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è ‚Äú—à—Ç–æ—Ä–∫–∞‚Äù —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π. Inline‚Äë–∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.

–≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ 
Thought for 22s
# bot.py
import os
import logging
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import init_db, get_or_create_user_code, get_tracks, add_track


# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")
logger.info("RUNNING FILE: %s", os.path.abspath(__file__))


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")


# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
CHINA_WAREHOUSE_ADDRESS = (
    "üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>\n\n"
    "‚¨áÔ∏è –í–°–¢–ê–í–¨–¢–ï –ù–ò–ñ–ï –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° –°–ö–õ–ê–î–ê (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) ‚¨áÔ∏è\n"
    "<i>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è ..., –≥. ..., —Ä–∞–π–æ–Ω ..., —É–ª. ..., —Å–∫–ª–∞–¥ ‚Ññ...</i>\n\n"
    "üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>\n"
)


# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TrackStates(StatesGroup):
    waiting_for_track = State()
    choosing_delivery = State()
    confirming = State()


class BuyStates(StatesGroup):
    waiting_for_details = State()


# –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é
def get_main_menu_inline() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="menu_buy"),
        InlineKeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="menu_manager"),
    )
    kb.add(
        InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="menu_getcod"),
        InlineKeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="menu_address"),
    )
    kb.add(
        InlineKeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="menu_sendtrack"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", callback_data="menu_mytracks"),
    )
    return kb


# –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–Ω–ª–∞–π–Ω)
DELIVERY_TYPES = {
    "fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"},
    "slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"},
    "rail": {"name": "üöÇ –ñ–î"},
    "air": {"name": "‚úàÔ∏è –ê–≤–∏–∞"},
}


def delivery_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for key, info in DELIVERY_TYPES.items():
        kb.add(InlineKeyboardButton(info["name"], callback_data=f"delivery_{key}"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))
    return kb


def confirm_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_track"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
    )
    return kb


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
    if not tracks:
        return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    lines: List[str] = []
    for idx, (track, delivery) in enumerate(tracks, start=1):
        suffix = f" ({delivery})" if delivery else ""
        lines.append(f"{idx}. <code>{track}</code>{suffix}")
    return "\n".join(lines)


def is_valid_track_number(text: str) -> bool:
    t = (text or "").strip().upper()
    if len(t) < 8 or len(t) > 40:
        return False
    return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


# –•–µ–ª–ø–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π
async def action_get_code(message: types.Message):
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", parse_mode="HTML")


async def action_get_address(message: types.Message):
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(CHINA_WAREHOUSE_ADDRESS.format(client_code=code), parse_mode="HTML")


async def action_my_tracks(message: types.Message):
    code = get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    text = f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
    text += "üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    await message.answer(text, parse_mode="HTML")


async def action_manager(message: types.Message):
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if MANAGER_ID:
        try:
            text = (
                "üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n"
            )
            await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")


# –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é

@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    welcome = (
        f"üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome, parse_mode="HTML", reply_markup=get_main_menu_inline())
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


# –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∫–æ–ª–±—ç–∫–∏
@dp.callback_query_handler(lambda c: c.data == "menu_getcod", state="*")
async def menu_getcod(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await action_get_code(cb.message)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_address", state="*")
async def menu_address(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await action_get_address(cb.message)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_mytracks", state="*")
async def menu_mytracks(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await action_my_tracks(cb.message)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_manager", state="*")
async def menu_manager(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await action_manager(cb.message)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_buy", state="*")
async def menu_buy(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await state.finish()
    await cb.message.answer(
        "üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel"
    )
    await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
    text = message.caption or message.text or ""
    if len(text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
        return
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    notify = (
        "üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
    )
    if MANAGER_ID:
        try:
            if message.photo:
                await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
            else:
                await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)
    await state.finish()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_sendtrack", state="*")
async def menu_sendtrack(cb: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cb.id)
    await state.finish()
    get_or_create_user_code(cb.from_user.id)
    tracks = get_tracks(cb.from_user.id)
    if tracks:
        await cb.message.answer("üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks), parse_mode="HTML")
    await cb.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await TrackStates.waiting_for_track.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


# –í–≤–æ–¥ —Ç—Ä–µ–∫–∞ ‚Üí –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=TrackStates.waiting_for_track, content_types=ContentType.TEXT)
async def handle_track_input(message: types.Message, state: FSMContext):
    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return
    await state.update_data(track=track)
    await TrackStates.choosing_delivery.set()
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç: <code>{track}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="HTML",
        reply_markup=delivery_keyboard(),
    )


# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=TrackStates.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "delivery_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    delivery_key = callback.data.replace("delivery_", "")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(delivery=delivery_key)

    data = await state.get_data()
    track = data["track"]

    await TrackStates.confirming.set()
    await callback.message.edit_text(
        f"üì¶ –¢—Ä–µ–∫: <code>{track}</code>\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        parse_mode="HTML",
        reply_markup=confirm_keyboard(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data in ("confirm_track", "confirm_cancel"), state=TrackStates.confirming)
async def confirm_track(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "confirm_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    data = await state.get_data()
    track = data["track"]
    delivery_key = data["delivery"]
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    add_track(callback.from_user.id, track, delivery_name)

    code = get_or_create_user_code(callback.from_user.id)
    tracks = get_tracks(callback.from_user.id)
    full_name = callback.from_user.full_name or ""
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if WAREHOUSE_ID:
        try:
            text = (
                "üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ö–û–î</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{callback.from_user.id}</code>\n\n"
                f"üìã –¢—Ä–µ–∫: <code>{track}</code>\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
                "üìö –í—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + format_tracks(tracks)
            )
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse: %s", e)

    await state.finish()
    await callback.message.edit_text(
        "‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞.\n\n"
        "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        parse_mode="HTML",
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


# –§–æ–ª–ª–±—ç–∫
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª (–æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥)
async def on_startup(dp: Dispatcher):
    init_db()
    # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´—à—Ç–æ—Ä–∫–∏¬ª –∫–æ–º–∞–Ω–¥)
    try:
        from aiogram.types import (
            BotCommandScopeDefault,
            BotCommandScopeAllPrivateChats,
            BotCommandScopeAllGroupChats,
            BotCommandScopeAllChatAdministrators,
        )
        for scope in [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllGroupChats(),
            BotCommandScopeAllChatAdministrators(),
        ]:
            try:
                await bot.delete_my_commands(scope=scope)
            except Exception:
                pass
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è scope
        try:
            await bot.delete_my_commands()
        except Exception:
            pass
    except Exception:
        # –ï—Å–ª–∏ —Ç–∏–ø—ã scope –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî —É–¥–∞–ª–∏–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            await bot.delete_my_commands()
        except Exception:
            pass

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        pass


async def on_shutdown(dp: Dispatcher):
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
