import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
WAREHOUSE_ID = 7095008192

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def generate_user_code(user_id):
    data = load_data()
    if str(user_id) not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        data[str(user_id)] = {
            "code": new_code,
            "tracks": [],
            "username": "",
            "full_name": "",
            "state": None
        }
        save_data(data)
    return data[str(user_id)]['code']

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

# –ö–æ–º–∞–Ω–¥–∞ /adress
@dp.message_handler(commands=['adress'])
async def send_address(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    address = CHINA_WAREHOUSE_ADDRESS.format(user_code=user_code)
    await message.answer(f"üè≠ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n\n{address}")

# –ö–æ–º–∞–Ω–¥–∞ /sendtrack - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    data = load_data()
    data[str(message.from_user.id)]['state'] = UserStates.WAITING_FOR_TRACK
    save_data(data)
    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ {user_code}:\n\n"
        "–ü—Ä–∏–º–µ—Ä: AB123456789CD"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track_number(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_TRACK:
        return
    
    track = message.text.upper()
    user_code = data[user_id]['code']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
    data[user_id]["tracks"].append({
        "track": track,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    data[user_id]['state'] = None
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–ª–∞–¥
    await bot.send_message(
        WAREHOUSE_ID,
        f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä!\n"
        f"–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {user_code}\n"
        f"–¢—Ä–µ–∫: {track}\n"
        f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {len(data[user_id]['tracks'])}"
    )
    
    await message.answer(f"‚úÖ –¢—Ä–µ–∫ {track} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∫–æ–¥—É {user_code}")

# –ö–æ–º–∞–Ω–¥–∞ /buy - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
@dp.message_handler(commands=['buy'])
async def start_order(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    data = load_data()
    data[str(message.from_user.id)]['state'] = UserStates.WAITING_FOR_ORDER
    save_data(data)
    await message.answer(
        f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∫–æ–¥: {user_code})\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ?\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§—É—Ç–±–æ–ª–∫–∏ —á–µ—Ä–Ω—ã–µ: 5 —à—Ç\n"
        "–î–∂–∏–Ω—Å—ã —Å–∏–Ω–∏–µ: 2 —à—Ç"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(content_types=[ContentType.TEXT, ContentType.PHOTO, ContentType.DOCUMENT])
async def handle_order(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_ORDER:
        return
    
    user_code = data[user_id]['code']
    order_text = message.text or "–°–º. –≤–ª–æ–∂–µ–Ω–∏—è"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    order_msg = f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n" \
                f"–ö–æ–¥: {user_code}\n" \
                f"–ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or '–Ω–µ—Ç'}\n" \
                f"–ó–∞–∫–∞–∑:\n{order_text}"
    
    await bot.send_message(ADMIN_ID, order_msg)
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id)
    
    data[user_id]['state'] = None
    save_data(data)
    
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏!")

# –ö–æ–º–∞–Ω–¥–∞ /manager
@dp.message_handler(commands=['manager'])
async def contact_manager(message: types.Message):
    user_code = await generate_user_code(message.from_user.id)
    await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await bot.send_message(
        ADMIN_ID,
        f"üìû –ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ (–∫–æ–¥: {user_code})\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or message.from_user.full_name}\n"
        f"–°—Å—ã–ª–∫–∞: https://t.me/{message.from_user.username}" if message.from_user.username else ""
    )

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
