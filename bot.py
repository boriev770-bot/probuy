import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = os.getenv("7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI
"))
ADMIN_ID = int(os.getenv("ADMIN_ID", "7095008192"))
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192"))

DB_FILE = "data.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
if os.path.exists(DB_FILE):
    with open(DB_FILE, "r") as f:
        db = json.load(f)
else:
    db = {"users": {}, "last_code": 0}

def save_db():
    with open(DB_FILE, "w") as f:
        json.dump(db, f, indent=2, ensure_ascii=False)

def generate_client_code():
    db["last_code"] += 1
    return f"PR{db['last_code']:05d}"

FAQ = {
    r"(—Å–¥–µ–ª–∞.*|–∑–∞–∫–∞–∑.*)": "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manager.",
    r"(—Å–∫–æ–ª—å.*|—Å—Ç–æ–∏.*|–¥–æ—Å—Ç–∞–≤–∫.*—Ü–µ–Ω–∞.*|—Ü–µ–Ω–∞.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'.",
    r"(–≤—Ä–µ–º—è.*|—Å—Ä–æ–∫.*|–∫–æ–≥–¥–∞.*–ø—Ä–∏–¥–µ—Ç.*|—á–µ—Ä–µ–∑.*–¥–Ω–µ–π.*|—Å—Ä–æ–∫–∏.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ä–æ–∫–∏: –±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ 10‚Äì15 –¥–Ω–µ–π, –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ 15‚Äì20 –¥–Ω–µ–π (–ú–æ—Å–∫–≤–∞, —Ä—ã–Ω–æ–∫ –Æ–∂–Ω—ã–µ –í–æ—Ä–æ—Ç–∞)."
}

def find_best_match(user_text):
    user_text = user_text.lower()
    for pattern, answer in FAQ.items():
        if re.search(pattern, user_text):
            return answer
    return None

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/getcod ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/adress ‚Äî –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫\n"
        "/manager ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
    )

@dp.message_handler(commands=["getcod"])
async def get_cod(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in db["users"]:
        code = generate_client_code()
        db["users"][user_id] = {"code": code, "tracks": []}
        save_db()
        await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {code}")
    else:
        await message.answer(f"–í–∞—à –∫–æ–¥ —É–∂–µ –µ—Å—Ç—å: {db['users'][user_id]['code']}")

@dp.message_handler(commands=["adress"])
async def adress(message: types.Message):
    await message.answer("üì¶ –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: –í–°–¢–ê–í–¨–¢–ï_–ê–î–†–ï–°_–°–ö–õ–ê–î–ê")

@dp.message_handler(commands=["sendtrack"])
async def send_track(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"), KeyboardButton("–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text in ["–ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ", "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"])
async def process_delivery(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in db["users"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ /getcod")
        return
    db["users"][user_id]["last_delivery"] = message.text
    save_db()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=["manager"])
async def manager(message: types.Message):
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n"
        f"–ò–º—è: {message.from_user.full_name}\n"
        f"Username: @{message.from_user.username if message.from_user.username else '–Ω–µ—Ç'}"
    )
    await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    if len(text) >= 5 and any(ch.isdigit() for ch in text):
        if user_id not in db["users"]:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ /getcod")
            return
        delivery = db["users"][user_id].get("last_delivery")
        if not delivery:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ /sendtrack")
            return

        db["users"][user_id]["tracks"].append({"track": text, "delivery": delivery})
        save_db()

        await bot.send_message(
            WAREHOUSE_ID,
            f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫!\n"
f"–ö–ª–∏–µ–Ω—Ç: {db['users'][user_id]['code']}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery}\n"
            f"–¢—Ä–µ–∫: {text}"
        )

        tracks = db["users"][user_id]["tracks"]
        history = "\\n".join([f"{t['track']} ({t['delivery']})" for t in tracks])
        await message.answer(f"–í–∞—à —Ç—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\\n–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤:\\n{history}")
        return

    response = find_best_match(text)
    if response:
        await message.answer(response)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏–ª–∏ /manager.")

if name == "__main__":
    asyncio.run(dp.start_polling())
