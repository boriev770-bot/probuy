import os
import logging
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import init_db, get_or_create_user_code, get_tracks, add_track


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI
")
# –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ Railway)
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")


# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
CHINA_WAREHOUSE_ADDRESS = (
    "üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>\n\n"
    "‚¨áÔ∏è –í–°–¢–ê–í–¨–¢–ï –ù–ò–ñ–ï –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° –°–ö–õ–ê–î–ê (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç) ‚¨áÔ∏è\n"
    "<i>–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è ..., –≥. ..., —Ä–∞–π–æ–Ω ..., —É–ª. ..., —Å–∫–ª–∞–¥ ‚Ññ...</i>\n\n"
    "üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>\n"
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TrackStates(StatesGroup):
    waiting_for_track = State()


class BuyStates(StatesGroup):
    waiting_for_details = State()


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
    if not tracks:
        return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
    lines: List[str] = []
    for idx, (track, delivery) in enumerate(tracks, start=1):
        suffix = f" ({delivery})" if delivery else ""
        lines.append(f"{idx}. <code>{track}</code>{suffix}")
    return "\n".join(lines)


@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    welcome = (
        f"üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/getcod ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        f"/adress ‚Äî –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ\n"
        f"/sendtrack ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥\n"
        f"/buy ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
        f"/mycod ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤\n"
        f"/manager ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
    )
    await message.answer(welcome, parse_mode="HTML")
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(commands=["getcod"], state="*")
async def cmd_getcod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", parse_mode="HTML")
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(commands=["adress"], state="*")
async def cmd_address(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    await message.answer(CHINA_WAREHOUSE_ADDRESS.format(client_code=code), parse_mode="HTML")
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


def is_valid_track_number(text: str) -> bool:
    t = (text or "").strip().upper()
    if len(t) < 8 or len(t) > 40:
        return False
    # –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


@dp.message_handler(commands=["sendtrack"], state="*")
async def cmd_sendtrack(message: types.Message, state: FSMContext):
    await state.finish()
    get_or_create_user_code(message.from_user.id)  # ensure code exists
    tracks = get_tracks(message.from_user.id)

    if tracks:
        await message.answer(
            "üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks),
            parse_mode="HTML",
        )
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await TrackStates.waiting_for_track.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.message_handler(state=TrackStates.waiting_for_track, content_types=types.ContentTypes.TEXT)
async def handle_track_input(message: types.Message, state: FSMContext):
    track = (message.text or "").strip().upper()
    if not is_valid_track_number(track):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    add_track(message.from_user.id, track)

    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    code = get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞ —Å –∏–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—Å–µ–º–∏ —Ç—Ä–µ–∫–∞–º–∏
    if WAREHOUSE_ID:
        try:
            text = (
                "üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ö–û–î</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
                f"üìã –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫: <code>{track}</code>\n\n"
                "üìö –í—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + format_tracks(tracks)
            )
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse: %s", e)

    await state.finish()
    await message.answer("‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞.")


@dp.message_handler(commands=["buy"], state="*")
async def cmd_buy(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
    text = message.caption or message.text or ""
    if len(text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
        return

    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    notify = (
        "üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
    )

    if MANAGER_ID:
        try:
            if message.photo:
                await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
            else:
                await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)

    await state.finish()
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")


@dp.message_handler(commands=["mycod"], state="*")
async def cmd_mycod(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    tracks = get_tracks(message.from_user.id)
    text = (
        f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n"
        + ("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
    )
    await message.answer(text, parse_mode="HTML")
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message_handler(commands=["manager"], state="*")
async def cmd_manager(message: types.Message, state: FSMContext):
    await state.finish()
    code = get_or_create_user_code(message.from_user.id)
    full_name = message.from_user.full_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if MANAGER_ID:
        try:
            text = (
                "üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üì± Username: {username}\n"
                f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n"
            )
            await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify manager: %s", e)

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")


@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω–æ: /start, /getcod, /adress, /sendtrack, /buy, /mycod, /manager")


async def on_startup(dp: Dispatcher):
    init_db()
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        pass


async def on_shutdown(dp: Dispatcher):
    try:
        if MANAGER_ID:
            await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
# database.py
import sqlite3
from typing import List, Optional, Tuple

DB_PATH = "database.db"


def init_db() -> None:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            code TEXT UNIQUE
        )
        """
    )

    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS tracks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            track TEXT,
            delivery TEXT,
            created_at TEXT DEFAULT (datetime('now')),
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
        """
    )

    conn.commit()
    conn.close()


def get_user_code(user_id: int) -> Optional[str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT code FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else None


def _generate_next_code(cursor) -> str:
    cursor.execute("SELECT code FROM users WHERE code LIKE 'PB%'")
    rows = cursor.fetchall()
    max_num = 0
    for (code,) in rows:
        try:
            if code and code.startswith("PB"):
                num = int(code[2:])
                if num > max_num:
                    max_num = num
        except Exception:
            continue
    next_num = max_num + 1
    return f"PB{next_num:05d}"


def get_or_create_user_code(user_id: int) -> str:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("BEGIN IMMEDIATE")
    try:
        cursor.execute("SELECT code FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row and row[0]:
            code = row[0]
        else:
            code = _generate_next_code(cursor)
            cursor.execute(
                "INSERT OR REPLACE INTO users (user_id, code) VALUES (?, ?)",
                (user_id, code),
            )
        conn.commit()
        return code
    finally:
        conn.close()


def add_track(user_id: int, track: str, delivery: str = "") -> None:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO tracks (user_id, track, delivery) VALUES (?, ?, ?)",
        (user_id, track, delivery),
    )
    conn.commit()
    conn.close()


def get_tracks(user_id: int) -> List[Tuple[str, Optional[str]]]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT track, delivery FROM tracks WHERE user_id=? ORDER BY id ASC",
        (user_id,),
    )
    rows = cursor.fetchall()
    conn.close()
    return rows
