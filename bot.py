import os
import re
import json
import asyncio
import logging
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('china_warehouse_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI')
MANAGER_ID = int(os.getenv('MANAGER_ID', '7095008192'))
WAREHOUSE_ID = int(os.getenv('WAREHOUSE_ID', '7095008192'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
if not TOKEN:
    raise ValueError("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not MANAGER_ID:
    raise ValueError("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MANAGER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not WAREHOUSE_ID:
    raise ValueError("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω WAREHOUSE_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "china_warehouse_data.json"

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """üè≠ <b>–ê–î–†–ï–° –°–ö–õ–ê–î–ê –í –ö–ò–¢–ê–ï</b>

üìç <b>–ê–¥—Ä–µ—Å:</b>
‰∏≠ÂõΩÂπø‰∏úÁúÅÂπøÂ∑ûÂ∏ÇÁôΩ‰∫ëÂå∫
–ö–∏—Ç–∞–π, –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –ì—É–∞–Ω–¥—É–Ω, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, –¥. 123, —Å–∫–ª–∞–¥ ‚Ññ456

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∫–ª–∞–¥–∞:</b>
–ú–µ–Ω–µ–¥–∂–µ—Ä: –í–∞–Ω –ú–∏–Ω–≥ (ÁéãÊòé)
–¢–µ–ª–µ—Ñ–æ–Ω: +86 138 0013 8000
WeChat: warehouse_manager_123

üîë <b>–í–ê–® –õ–ò–ß–ù–´–ô –ö–û–î –ö–õ–ò–ï–ù–¢–ê:</b> <code>{client_code}</code>

‚ö†Ô∏è <b>–í–ê–ñ–ù–û!</b> 
–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ <code>{client_code}</code> –≤ –ø–æ–ª–µ "–ü–æ–ª—É—á–∞—Ç–µ–ª—å" –∏–ª–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

üì¶ <b>–ö–∞–∫ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–¥:</b>
‚Ä¢ –í –ø–æ–ª–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—å: "Wang Ming {client_code}"
‚Ä¢ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É: "Warehouse code: {client_code}"
‚Ä¢ –í –ª—é–±–æ–º –ø–æ–ª–µ –≥–¥–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

üöö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É:</b>
‚Ä¢ üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ (7-10 –¥–Ω–µ–π)
‚Ä¢ üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ (15-20 –¥–Ω–µ–π)  
‚Ä¢ ‚úàÔ∏è –ê–≤–∏–∞ (3-5 –¥–Ω–µ–π)
‚Ä¢ üöÇ –ñ–î (10-14 –¥–Ω–µ–π)"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
file_lock = asyncio.Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserStates(StatesGroup):
    waiting_for_track = State()
    choosing_delivery = State()
    waiting_for_order = State()

# –¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
DELIVERY_TYPES = {
    "fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ", "days": "7-10 –¥–Ω–µ–π", "description": "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"},
    "slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ", "days": "15-20 –¥–Ω–µ–π", "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"},
    "avia": {"name": "‚úàÔ∏è –ê–≤–∏–∞", "days": "3-5 –¥–Ω–µ–π", "description": "–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤–∏–∞–ø–æ—á—Ç–æ–π"},
    "railway": {"name": "üöÇ –ñ–î", "days": "10-14 –¥–Ω–µ–π", "description": "–î–æ—Å—Ç–∞–≤–∫–∞ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"}
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö
@asynccontextmanager
async def safe_file_access():
    async with file_lock:
        yield

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
async def load_data():
    async with safe_file_access():
        try:
            if not os.path.exists(DATA_FILE):
                logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                return {}
            
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(data)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                return data
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
async def save_data(data):
    async with safe_file_access():
        try:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {len(data)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async def get_or_create_client(user_id, message=None):
    data = await load_data()
    user_id = str(user_id)
    
    if user_id not in data:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ PB00001, PB00002 –∏ —Ç.–¥.
        existing_codes = []
        for client in data.values():
            if client.get('client_code', '').startswith('PB'):
                try:
                    code_num = int(client['client_code'][2:])
                    existing_codes.append(code_num)
                except (ValueError, IndexError):
                    continue
        
        last_code = max(existing_codes) if existing_codes else 0
        new_client_code = f"PB{last_code + 1:05d}"
        
        client_data = {
            "client_code": new_client_code,
            "tracks": [],
            "orders": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "phone": "",
            "created_at": datetime.now().isoformat(),
            "last_activity": datetime.now().isoformat()
        }
        
        data[user_id] = client_data
        await save_data(data)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {client_data['full_name']} ({new_client_code})")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
        try:
            await bot.send_message(
                MANAGER_ID,
                f"üë§ <b>–ù–û–í–´–ô –ö–õ–ò–ï–ù–¢ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù</b>\n\n"
                f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{new_client_code}</code>\n"
                f"üë§ –ò–º—è: {client_data['full_name']}\n"
                f"üì± Username: @{client_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî Telegram ID: <code>{user_id}</code>\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )
        except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await message.answer(
            "‚ùå <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é.",
            parse_mode='HTML'
        )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message_handler(commands=['help'], state='*')
async def cmd_help(message: types.Message, state: FSMContext):
    await state.finish()
    
    help_text = """‚ÑπÔ∏è <b>–°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ë–û–¢–ê</b>

üîë <b>–ú–æ–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</b>
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤

üì¶ <b>–ú–æ–∏ —Ç—Ä–µ–∫–∏</b>  
–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤

üìç <b>–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞</b>
–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º

üöö <b>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫</b>
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏

üõí <b>–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä</b>
–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–∞–π–µ—Ä–∞ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)

üë®‚Äçüíº <b>–í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>
–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤

üìù <b>–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:</b>

1Ô∏è‚É£ <b>–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤</b> –í–°–ï–ì–î–ê —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
2Ô∏è‚É£ <b>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞</b> –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
3Ô∏è‚É£ <b>–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</b> (–±—ã—Å—Ç—Ä–æ/–¥–µ—à–µ–≤–æ)
4Ô∏è‚É£ <b>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã</b> —á–µ—Ä–µ–∑ –±–∞–π–µ—Ä–∞

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    await message.answer(help_text, parse_mode='HTML')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    if message.from_user.id != MANAGER_ID:
        return
    
    data = await load_data()
    if not data:
        await message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤", parse_mode='HTML')
        return
    
    total_tracks = sum(len(client.get('tracks', [])) for client in data.values())
    total_orders = sum(len(client.get('orders', [])) for client in data.values())
    
    stats_text = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(data)}\n"
    stats_text += f"üì¶ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}\n"
    stats_text += f"üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
    stats_text += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    sorted_clients = sorted(data.items(), 
                          key=lambda x: x[1].get('created_at', ''), 
                          reverse=True)[:10]
    
    for i, (user_id, client) in enumerate(sorted_clients, 1):
        stats_text += (f"{i}. {client['client_code']} - {client['full_name']}\n"
                      f"   üì¶ –¢—Ä–µ–∫–æ–≤: {len(client.get('tracks', []))}, "
                      f"üõí –ó–∞–∫–∞–∑–æ–≤: {len(client.get('orders', []))}\n")
    
    await message.answer(stats_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.TEXT, state='*')
async def handle_unknown_message(message: types.Message, state: FSMContext):
    await state.finish()
    
    await message.answer(
        "‚ùì <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        parse_mode='HTML'
    )
    await show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exception}")
    
    if update.message:
        try:
            await update.message.answer(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ!",
                parse_mode='HTML'
            )
        except:
            pass
    
    return True

# –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def on_startup(dp):
    logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∑–∞–ø—É—â–µ–Ω!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(DATA_FILE):
        await save_data({})
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    try:
        await bot.send_message(
            MANAGER_ID,
            "ü§ñ <b>–ë–û–¢ –ö–ò–¢–ê–ô–°–ö–û–ì–û –°–ö–õ–ê–î–ê –ó–ê–ü–£–©–ï–ù</b>\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\n"
            f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

async def on_shutdown(dp):
    logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    try:
        await bot.send_message(
            MANAGER_ID,
            "üî¥ <b>–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
            f"üìÖ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            parse_mode='HTML'
        )
    except:
        pass
    
    await dp.storage.close()
    await dp.storage.wait_closed()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞...")
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("\nüîß –ü–†–û–í–ï–†–¨–¢–ï:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ MANAGER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è") 
        print("3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ WAREHOUSE_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram: pip install aiogram"):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ: {e}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    data[user_id]["last_activity"] = datetime.now().isoformat()
    await save_data(data)
    
    return data[user_id]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
def is_valid_track_number(track):
    track = track.upper().strip()
    patterns = [
        r'^[A-Z]{2}\d{9}[A-Z]{2}$',
        r'^[A-Z]{1}\d{10}$',
        r'^[0-9]{10,20}$',
        r'^[A-Z0-9]{8,30}$'
    ]
    return any(re.match(pattern, track) for pattern in patterns) and len(track.strip()) >= 8

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
def create_delivery_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, delivery in DELIVERY_TYPES.items():
        keyboard.add(InlineKeyboardButton(
            f"{delivery['name']} ({delivery['days']})",
            callback_data=f"delivery_{key}"
        ))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delivery"))
    return keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üîë –ú–æ–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"),
        types.KeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏")
    )
    keyboard.add(
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞"),
        types.KeyboardButton("üöö –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫")
    )
    keyboard.add(
        types.KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"),
        types.KeyboardButton("üë®‚Äçüíº –í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    )
    
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    
    client = await get_or_create_client(message.from_user.id, message)
    
    welcome_text = f"""üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–∫—É–ø–∞ —Å –∫–∏—Ç–∞–π—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤!</b>

üîë <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:</b> <code>{client['client_code']}</code>

üìã <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –≤–∞—à–∏—Ö –ø–æ—Å—ã–ª–æ–∫
‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É
‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –±–∞–π–µ—Ä–∞
‚Ä¢ –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å:</b>
–í–∞—à –∫–æ–¥ <code>{client['client_code']}</code> –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∞–π—Ç–∞—Ö!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"""
    
    await message.answer(welcome_text, parse_mode='HTML')
    await show_main_menu(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "üîë –ú–æ–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", state='*')
async def show_client_code(message: types.Message, state: FSMContext):
    await state.finish()
    client = await get_or_create_client(message.from_user.id)
    
    await message.answer(
        f"üîë <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
        f"<code>{client['client_code']}</code>\n\n"
        f"üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"‚Ä¢ –ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø–æ–ª–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ –ò–ª–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É\n"
        f"‚Ä¢ –ë–µ–∑ —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –ø–æ—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è!\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        parse_mode='HTML'
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", state='*')
async def show_client_tracks(message: types.Message, state: FSMContext):
    await state.finish()
    client = await get_or_create_client(message.from_user.id)
    
    if not client['tracks']:
        await message.answer(
            "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöö –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞",
            parse_mode='HTML'
        )
        return
    
    tracks_text = f"üì¶ <b>–í–∞—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:</b>\n\n"
    
    for i, track_info in enumerate(client['tracks'], 1):
        delivery_info = DELIVERY_TYPES.get(track_info.get('delivery_type', ''), {})
        tracks_text += f"<b>{i}.</b> <code>{track_info['track']}</code>\n"
        tracks_text += f"   üöö {delivery_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        tracks_text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {track_info['date'][:16]}\n\n"
    
    tracks_text += f"üìä <b>–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤:</b> {len(client['tracks'])}"
    
    await message.answer(tracks_text, parse_mode='HTML')

# –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞
@dp.message_handler(lambda message: message.text == "üìç –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞", state='*')
async def show_warehouse_address(message: types.Message, state: FSMContext):
    await state.finish()
    client = await get_or_create_client(message.from_user.id)
    
    address = CHINA_WAREHOUSE_ADDRESS.format(client_code=client['client_code'])
    
    await message.answer(address, parse_mode='HTML')

# –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
@dp.message_handler(lambda message: message.text == "üöö –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", state='*')
async def add_track_start(message: types.Message):
    client = await get_or_create_client(message.from_user.id)
    
    await UserStates.waiting_for_track.set()
    
    tracks_info = ""
    if client['tracks']:
        tracks_info = f"\nüì¶ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–∫–∏:</b>\n"
        for i, track_info in enumerate(client['tracks'], 1):
            delivery_info = DELIVERY_TYPES.get(track_info.get('delivery_type', ''), {})
            tracks_info += f"{i}. <code>{track_info['track']}</code> ({delivery_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
        tracks_info += "\n"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    await message.answer(
        f"üöö <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞</b>{tracks_info}\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n"
        f"‚Ä¢ <code>RB123456789CN</code>\n"
        f"‚Ä¢ <code>CP123456789CN</code>\n" 
        f"‚Ä¢ <code>1234567890123</code>\n"
        f"‚Ä¢ <code>YT1234567890123456</code>\n\n"
        f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞!",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
@dp.message_handler(state=UserStates.waiting_for_track)
async def handle_track_input(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await show_main_menu(message)
        return
    
    track_number = message.text.strip().upper()
    
    if not is_valid_track_number(track_number):
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞!</b>\n\n"
            "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 8-30 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä\n"
            "‚Ä¢ –ë—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'",
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    data = await load_data()
    user_id = str(message.from_user.id)
    client = data[user_id]
    
    existing_tracks = [t['track'] for t in client['tracks']]
    if track_number in existing_tracks:
        await message.answer(
            f"‚ö†Ô∏è <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"–¢—Ä–µ–∫ <code>{track_number}</code> —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
            parse_mode='HTML'
        )
        return
    
    await state.update_data(track_number=track_number)
    await UserStates.choosing_delivery.set()
    
    await message.answer(
        f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä <code>{track_number}</code> –ø—Ä–∏–Ω—è—Ç\n\n"
        f"üöö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É:</b>",
        reply_markup=create_delivery_keyboard(),
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('delivery_'), state=UserStates.choosing_delivery)
async def handle_delivery_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    if callback_query.data == "cancel_delivery":
        await state.finish()
        await callback_query.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await show_main_menu(callback_query.message)
        return
    
    delivery_type = callback_query.data.replace('delivery_', '')
    delivery_info = DELIVERY_TYPES[delivery_type]
    
    state_data = await state.get_data()
    track_number = state_data['track_number']
    
    data = await load_data()
    user_id = str(callback_query.from_user.id)
    client = data[user_id]
    
    track_data = {
        "track": track_number,
        "delivery_type": delivery_type,
        "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "status": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    }
    
    client['tracks'].append(track_data)
    await save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∫–ª–∞–¥
    try:
        warehouse_message = (
            f"üì¶ <b>–ù–û–í–´–ô –¢–†–ï–ö-–ù–û–ú–ï–†</b>\n\n"
            f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{client['client_code']}</code>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client['full_name']}\n"
            f"üì± Username: @{client['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìã –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: <code>{track_number}</code>\n"
            f"üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_info['name']} ({delivery_info['days']})\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞: {len(client['tracks'])}"
        )
        
        await bot.send_message(WAREHOUSE_ID, warehouse_message, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∫–ª–∞–¥: {e}")
    
    await state.finish()
    
    confirmation_text = (
        f"‚úÖ <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"üìã –¢—Ä–µ–∫: <code>{track_number}</code>\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_info['name']} ({delivery_info['days']})\n\n"
        f"üì¶ <b>–í—Å–µ –≤–∞—à–∏ —Ç—Ä–µ–∫–∏:</b>\n"
    )
    
    for i, track_info in enumerate(client['tracks'], 1):
        delivery = DELIVERY_TYPES.get(track_info.get('delivery_type', ''), {})
        confirmation_text += f"{i}. <code>{track_info['track']}</code> ({delivery.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
    
    await callback_query.message.edit_text(confirmation_text, parse_mode='HTML')
    await show_main_menu(callback_query.message)

# –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(lambda message: message.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä", state='*')
async def start_order(message: types.Message):
    await UserStates.waiting_for_order.set()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    await message.answer(
        "üõí <b>–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–π–µ—Ä–∞</b>\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:\n\n"
        "üî∏ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä/—Ü–≤–µ—Ç (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "üì± –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "\"–ù—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å iPhone 15 Pro —á–µ—Ä–Ω—ã–π 256GB, 1 —à—Ç—É–∫–∞, —Ü–µ–Ω–∞ –æ–∫–æ–ª–æ $1000, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\"",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=UserStates.waiting_for_order, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_order_input(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        await show_main_menu(message)
        return
    
    order_text = message.text or message.caption or ""
    
    if len(order_text.strip()) < 10:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n"
            "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∑–∞–∫–∞–∑.",
            parse_mode='HTML'
        )
        return
    
    data = await load_data()
    user_id = str(message.from_user.id)
    client = data[user_id]
    
    order_data = {
        "text": order_text,
        "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "status": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É",
        "has_photo": message.photo is not None
    }
    
    if 'orders' not in client:
        client['orders'] = []
    client['orders'].append(order_data)
    await save_data(data)
    
    try:
        manager_message = (
            f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ß–ï–†–ï–ó –ë–ê–ô–ï–†–ê</b>\n\n"
            f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{client['client_code']}</code>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client['full_name']}\n"
            f"üì± Username: @{client['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî Telegram ID: <code>{user_id}</code>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n{order_text}\n\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {len(client['orders'])}"
        )
        
        if message.photo:
            await bot.send_photo(
                MANAGER_ID, 
                message.photo[-1].file_id,
                caption=manager_message,
                parse_mode='HTML'
            )
        else:
            await bot.send_message(MANAGER_ID, manager_message, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    await state.finish()
    
    await message.answer(
        "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!</b>\n\n"
        "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è:\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n" 
        "‚Ä¢ –†–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π\n\n"
        "‚è± <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
        parse_mode='HTML'
    )
    await show_main_menu(message)

# –í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(lambda message: message.text == "üë®‚Äçüíº –í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", state='*')
async def call_manager(message: types.Message, state: FSMContext):
    await state.finish()
    client = await get_or_create_client(message.from_user.id, message)
    
    try:
        manager_message = (
            f"üìû <b>–ö–õ–ò–ï–ù–¢ –í–´–ó–´–í–ê–ï–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê</b>\n\n"
            f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{client['client_code']}</code>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client['full_name']}\n"
            f"üì± Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"
            f"‚Ä¢ –¢—Ä–µ–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(client['tracks'])}\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {len(client.get('orders', []))}\n"
            f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {client['created_at'][:10]}\n\n"
            f"üìÖ –í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await bot.send_message(MANAGER_ID, manager_message, parse_mode='HTML')
        
        await message.answer(
            "‚úÖ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–∑–≤–∞–Ω!</b>\n\n"
            "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏\n"
            "üìû –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n"
            "‚è± <b>–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> 15-30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
            "üïê <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> 09:00 - 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏",
            parse_mode='HTML'
        )
        
    except Exception as e