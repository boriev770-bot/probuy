import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
WAREHOUSE_ID = –í–°–¢–ê–í–¨_ID_–°–ö–õ–ê–î–ê  # ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–∞

DATA_FILE = "data.json"

FAQ = {
    r"(—Å–¥–µ–ª–∞.*|–∑–∞–∫–∞–∑.*)": "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –≤ –±–æ—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
    r"(—Å–∫–æ–ª—å.*|—Å—Ç–æ–∏.*|–¥–æ—Å—Ç–∞–≤–∫.*|—Ü–µ–Ω–∞.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è.",
    r"(–≤—Ä–µ–º—è.*|—Å—Ä–æ–∫.*|–∫–æ–≥–¥–∞.*–ø—Ä–∏–¥–µ—Ç.*|—á–µ—Ä–µ–∑.*–¥–Ω–µ–π.*|—Å—Ä–æ–∫–∏.*–¥–æ—Å—Ç–∞–≤–∫.*)": "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –±—ã—Å—Ç—Ä—ã–º –∞–≤—Ç–æ: 10-15 –¥–Ω–µ–π, –º–µ–¥–ª–µ–Ω–Ω—ã–º –∞–≤—Ç–æ: 15-20 –¥–Ω–µ–π."
}

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def find_best_match(user_text):
    user_text = user_text.lower()
    best_match = None
    best_score = 0
    for pattern, answer in FAQ.items():
        match = re.findall(pattern, user_text)
        if match:
            score = sum(len(m) for m in match)
            if score > best_score:
                best_score = score
                best_match = answer
    return best_match

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
"
                         "/getcod ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä
"
                         "/adress ‚Äî –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞
"
                         "/sendtrack ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫
"
                         "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏ '–æ–ø–µ—Ä–∞—Ç–æ—Ä'."
                        )

@dp.message_handler(commands=['getcod'])
async def get_code(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    if user_id not in data:
        last_number = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_number+1:05d}"
        data[user_id] = {"code": new_code, "tracks": []}
        save_data(data)
        await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä: {new_code}")
    else:
        await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä: {data[user_id]['code']}")

@dp.message_handler(commands=['adress'])
async def adress(message: types.Message):
    await message.answer("–í–°–¢–ê–í–¨_–°–í–û–ô_–ê–î–†–ï–°_–°–ö–õ–ê–î–ê")

@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üöó –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"), KeyboardButton("üöõ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in ["üöó –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ", "üöõ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"])
async def get_delivery_type(message: types.Message):
    delivery_type = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:", reply_markup=types.ReplyKeyboardRemove())
    dp.delivery_choice = delivery_type

@dp.message_handler()
async def text_handler(message: types.Message):
    text = message.text.lower()

    if text == "–æ–ø–µ—Ä–∞—Ç–æ—Ä":
        await message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        await bot.send_message(ADMIN_ID,
                               f"üì© –ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!
–ò–º—è: {message.from_user.full_name}
"
                               f"Username: @{message.from_user.username or '–Ω–µ—Ç'}
"
                               f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        return

    if hasattr(dp, "delivery_choice"):
        data = load_data()
        user_id = str(message.from_user.id)
        if user_id not in data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ /getcod")
            return
        data[user_id]["tracks"].append({"track": message.text, "delivery": dp.delivery_choice})
        save_data(data)
        await bot.send_message(WAREHOUSE_ID,
                               f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫!
–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {data[user_id]['code']}
"
                               f"–¢—Ä–µ–∫: {message.text}
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {dp.delivery_choice}")
        await message.answer("–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.")
        del dp.delivery_choice
        return

    response = find_best_match(text)
    if response:
        await message.answer(response)
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Å–≤—è–∑–∏.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling())
