import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
USERS_FILE = "users.txt"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
waiting_for_order = set()
active_users = set()
user_data = {}
waiting_for_broadcast = False

FAQ = {
    r"(?i)\b(—Å–¥–µ–ª–∞—Ç—å|–∑–∞–∫–∞–∑|–∑–∞–∫–∞–∑–∞—Ç—å|–æ—Ñ–æ—Ä–º–∏—Ç—å)\b": 
        "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –∏ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ üí¨",
    r"(?i)\b(—Å–∫–æ–ª—å–∫–æ|—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω–∞|—Å—Ç–æ–∏—Ç|–¥–æ—Å—Ç–∞–≤–∫–∞)\b": 
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
    r"(?i)\b(–≤—Ä–µ–º—è|—Å—Ä–æ–∫|–∫–æ–≥–¥–∞|–¥–Ω–µ–π|—Å—Ä–æ–∫–∏|–¥–æ—Å—Ç–∞–≤—è—Ç)\b": 
        "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: 10-20 –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ (–¥–æ –ú–æ—Å–∫–≤—ã)."
}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def save_user(user_id, username=None, first_name=None):
    user_id = str(user_id)
    if user_id not in active_users:
        active_users.add(user_id)
        user_data[user_id] = {
            'username': username,
            'first_name': first_name
        }
        with open(USERS_FILE, 'a') as f:
            f.write(f"{user_id},{username or ''},{first_name or ''}\n")

def load_users():
    if not os.path.exists(USERS_FILE):
        return
    with open(USERS_FILE, 'r') as f:
        for line in f:
            if line.strip():
                user_id, username, first_name = line.strip().split(',')[:3]
                active_users.add(user_id)
                user_data[user_id] = {
                    'username': username if username else None,
                    'first_name': first_name if first_name else None
                }

# --- –ü–æ–∏—Å–∫ –≤ FAQ ---
def find_best_match(text):
    if not text:
        return None
    text = text.lower()
    for pattern, answer in FAQ.items():
        if re.search(pattern, text):
            return answer
    return None

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
async def notify_admin(message: types.Message, message_type="–∑–∞–ø—Ä–æ—Å"):
    user = message.from_user
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", 
        callback_data=f"reply_{user.id}"
    ))
    
    caption = (
        f"üì¢ –ù–æ–≤—ã–π {message_type}!\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üîó Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
    )

    if message.text:
        caption += f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        await bot.send_message(ADMIN_ID, caption, reply_markup=markup)
    elif message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=markup)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, caption=caption, reply_markup=markup)
    elif message.video:
        await bot.send_video(ADMIN_ID, message.video.file_id, caption=caption, reply_markup=markup)
    else:
        await bot.send_message(ADMIN_ID, caption, reply_markup=markup)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/buy ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "'–æ–ø–µ—Ä–∞—Ç–æ—Ä' ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['buy'])
async def ask_order(message: types.Message):
    user = message.from_user
    save_user(user.id, user.username, user.first_name)
    waiting_for_order.add(user.id)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "3. –¢–µ–ª–µ—Ñ–æ–Ω\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç"
    )

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@dp.message_handler(commands=['broadcast'])
async def broadcast_start(message: types.Message):
    global waiting_for_broadcast
    if message.from_user.id != ADMIN_ID:
        return
    waiting_for_broadcast = True
    await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_message(message: types.Message):
    global waiting_for_broadcast
    user = message.from_user
    save_user(user.id, user.username, user.first_name)

    # --- –†–ê–°–°–´–õ–ö–ê ---
    if waiting_for_broadcast and message.from_user.id == ADMIN_ID:
        waiting_for_broadcast = False
        users_list = list(active_users)
        total = len(users_list)
        count = 0
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

        for i in range(0, total, 30):
            batch = users_list[i:i+30]
            for user_id in batch:
                try:
                    if message.text:
                        await bot.send_message(user_id, message.text)
                    elif message.photo:
                        await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "")
                    elif message.video:
                        await bot.send_video(user_id, message.video.file_id, caption=message.caption or "")
                    elif message.document:
                        await bot.send_document(user_id, message.document.file_id, caption=message.caption or "")
                    count += 1
                except:
                    continue
            await asyncio.sleep(2)

        await message.answer(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {count}/{total}")
        return

    # --- –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ---
    if user.id in waiting_for_order:
        await notify_admin(message, "–∑–∞–∫–∞–∑")
        waiting_for_order.remove(user.id)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è.")
        return

    # --- –ó–ê–ü–†–û–° –û–ü–ï–†–ê–¢–û–†–ê ---
    if message.text and "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in message.text.lower():
        await notify_admin(message, "–∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
        return

    # --- FAQ ---
    if message.text:
        answer = find_best_match(message.text)
        if answer:
            await message.answer(answer)
        else:
            await message.answer("‚ùì –ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' –¥–ª—è —Å–≤—è–∑–∏.")

# --- –ó–∞–ø—É—Å–∫ ---
load_users()

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())