import os
import asyncio
import logging
import re
from typing import List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
	ContentType,
	InlineKeyboardMarkup,
	InlineKeyboardButton,
	ReplyKeyboardMarkup,
	KeyboardButton,
	CallbackQuery,
    WebAppInfo,
    InputMediaPhoto,
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.middlewares import BaseMiddleware

from database import (
	init_db,
	get_user_code,
	get_or_create_user_code,
	get_tracks,
	add_track,
	add_track_photo,
	get_track_photos,
	find_user_ids_by_track,
	delete_all_user_tracks,
    get_user_id_by_code,
    get_recipient,
    set_recipient,
    get_next_cargo_num,
    create_shipment,
    get_user_id_by_cargo_code,
    update_shipment_status,
    list_user_shipments_by_status,
    delete_all_user_shipments,
    count_user_shipments,
	# reminders/activity
	record_user_activity,
	mark_pressed_address,
	mark_pressed_sendcargo,
	get_users_for_address_reminder,
	get_users_for_sendcargo_reminder,
	get_users_for_inactive_reminder,
	mark_address_reminder_sent,
	mark_sendcargo_reminder_sent,
	mark_inactive_reminder_sent,
)


logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("china_warehouse_bot")
logger.info("RUNNING FILE: %s", os.path.abspath(__file__))

BOT_TOKEN = os.getenv("BOT_TOKEN")

def _resolve_webapp_url() -> str:
	# Priority: explicit WEBAPP_URL, then common hosting envs
	candidates = [
		(os.getenv("WEBAPP_URL", "").strip()),
		(os.getenv("PUBLIC_URL", "").strip()),
		(os.getenv("RENDER_EXTERNAL_URL", "").strip()),
		(os.getenv("RAILWAY_PUBLIC_DOMAIN", "").strip()),
		(os.getenv("VERCEL_URL", "").strip()),
	]
	# Compose from FLY_APP_NAME if others are empty
	fly_name = (os.getenv("FLY_APP_NAME", "").strip())
	if fly_name and not any(candidates):
		candidates.append(f"{fly_name}.fly.dev")
	for url in candidates:
		if not url:
			continue
		if not (url.startswith("http://") or url.startswith("https://")):
			url = f"https://{url}"
		return url
	return ""

WEBAPP_URL = _resolve_webapp_url()
MANAGER_ID = int(os.getenv("MANAGER_ID", "7095008192") or 7095008192)
WAREHOUSE_ID = int(os.getenv("WAREHOUSE_ID", "7095008192") or 7095008192)

if not BOT_TOKEN:
	raise RuntimeError("BOT_TOKEN is not set")

CHINA_WAREHOUSE_ADDRESS = (
	"Âº†ÁîüÁîü{client_code}\n"
	"16604524466 \n"
	"Âπø‰∏úÁúÅ ‰ΩõÂ±±Â∏Ç ÂçóÊµ∑Âå∫ ÈáåÊ∞¥Èïá ‰∏úÁßÄË∑Ø Ê≤≥Â°±Ê≤ô5Âè∑ ‰∏ÄÊ•º‰ªìÂ∫ìEM00-–•–•–•–•–•"
)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –î–µ—Ä–∂–∏–º –æ–¥–Ω–æ ¬´—ç–∫—Ä–∞–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞ —á–∞—Ç –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ —Å–ø–∞–º–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
_menu_message_by_chat: dict[int, int] = {}


class ActivityMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        try:
            if message.from_user:
                record_user_activity(int(message.from_user.id))
        except Exception:
            pass

    async def on_pre_process_callback_query(self, callback_query: CallbackQuery, data: dict):
        try:
            if callback_query.from_user:
                record_user_activity(int(callback_query.from_user.id))
        except Exception:
            pass


async def show_menu_screen(chat_id: int, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None, parse_mode: Optional[str] = "HTML") -> None:
	message_id = _menu_message_by_chat.get(chat_id)
	if message_id:
		try:
			await bot.edit_message_text(
				chat_id=chat_id,
				message_id=message_id,
				text=text,
				parse_mode=parse_mode,
				reply_markup=reply_markup,
			)
			return
		except Exception:
			# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—É–¥–∞–ª–µ–Ω–æ/—É—Å—Ç–∞—Ä–µ–ª–æ) ‚Äî –ø—Ä–∏—à–ª—ë–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–æ–º–Ω–∏–º id
			pass
	sent = await bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
	_menu_message_by_chat[chat_id] = sent.message_id


class TrackStates(StatesGroup):
	waiting_for_track = State()
	choosing_delivery = State()
	confirming = State()


class BuyStates(StatesGroup):
	waiting_for_details = State()


class PhotoStates(StatesGroup):
	waiting_for_track = State()


class CargoStates(StatesGroup):
	waiting_for_recipient = State()
	choosing_delivery = State()
	confirming = State()


class AdminShipmentStates(StatesGroup):
	waiting_for_cargo_code = State()
	waiting_for_media = State()


# –ë—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
_admin_album_buffers: dict[str, list[dict]] = {}


def get_main_menu_inline() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="menu_buy"),
		InlineKeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="menu_manager"),
	)
	kb.add(
		InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="menu_getcod"),
		InlineKeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="menu_address"),
	)
	kb.add(
		InlineKeyboardButton("üè≠ –°–∫–ª–∞–¥", callback_data="menu_warehouse"),
		InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞", callback_data="menu_status"),
	)
	kb.add(
		InlineKeyboardButton("üì∑ –§–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å", callback_data="menu_photokontrol"),
	)
	kb.add(
		InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="menu_clearhistory"),
	)
	return kb


def get_main_menu_reply() -> ReplyKeyboardMarkup:
	kb = ReplyKeyboardMarkup(resize_keyboard=True)
	kb.row(KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å"), KeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"))
	kb.row(KeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"), KeyboardButton("üìç –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å"))
	kb.row(KeyboardButton("üè≠ –°–∫–ª–∞–¥"), KeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞"))
	kb.row(KeyboardButton("üì∑ –§–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å"))
	kb.row(KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"))
	return kb


DELIVERY_TYPES = {
	"fast_auto": {"name": "üöõ –ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ"},
	"slow_auto": {"name": "üöö –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ"},
	"rail": {"name": "üöÇ –ñ–î"},
	"air": {"name": "‚úàÔ∏è –ê–≤–∏–∞"},
}


def delivery_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=1)
	for key, info in DELIVERY_TYPES.items():
		kb.add(InlineKeyboardButton(info["name"], callback_data=f"delivery_{key}"))
	kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))
	return kb


def confirm_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_track"),
		InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
	)
	return kb


def clear_history_confirm_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm"),
		InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="clear_cancel"),
	)
	return kb


def clear_history_entry_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=1)
	kb.add(InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="menu_clearhistory"))
	return kb


def cargo_confirm_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="cargo_confirm"),
		InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="cargo_edit"),
	)
	kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cargo_cancel"))
	return kb


def warehouse_menu_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", callback_data="menu_sendtrack"),
		InlineKeyboardButton("üì¶ –ú–æ–∏ —Ç—Ä–µ–∫–∏", callback_data="menu_mytracks"),
	)
	kb.add(
		InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑", callback_data="menu_sendcargo"),
	)
	kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
	return kb


def cargo_status_menu_keyboard() -> InlineKeyboardMarkup:
	kb = InlineKeyboardMarkup(row_width=2)
	kb.add(
		InlineKeyboardButton("üß∞ –ù–∞ —Å–±–æ—Ä–∫–µ", callback_data="status_building"),
		InlineKeyboardButton("‚úÖ –û—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–µ", callback_data="status_shipped"),
	)
	kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
	return kb


def parse_recipient_input(text: Optional[str]) -> Optional[Tuple[str, str, str]]:
	if not text:
		return None
	raw = text.strip()
	if not raw:
		return None
	# –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: ; , –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
	parts = re.split(r"[;\n,]+", raw)
	parts = [p.strip() for p in parts if p.strip()]
	if len(parts) < 3:
		return None
	fio, phone, city = parts[0], parts[1], parts[2]
	return fio, phone, city


def format_tracks(tracks: List[Tuple[str, Optional[str]]]) -> str:
	if not tracks:
		return "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"
	lines: List[str] = []
	for idx, (track, delivery) in enumerate(tracks, start=1):
		suffix = f" ({delivery})" if delivery else ""
		lines.append(f"{idx}. <code>{track}</code>{suffix}")
	return "\n".join(lines)


def is_valid_track_number(text: str) -> bool:
	t = (text or "").strip().upper()
	if len(t) < 8 or len(t) > 40:
		return False
	return all("A" <= c <= "Z" or "0" <= c <= "9" for c in t)


def extract_track_from_text(text: Optional[str]) -> Optional[str]:
	if not text:
		return None
	text_upper = text.upper()
	# –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ A-Z0-9 –¥–ª–∏–Ω–æ–π 8..40
	match = re.search(r"[A-Z0-9]{8,40}", text_upper)
	if match:
		candidate = match.group(0)
		return candidate if is_valid_track_number(candidate) else None
	return None


def extract_cargo_code(text: Optional[str]) -> Optional[str]:
	if not text:
		return None
	raw = (text or "").strip().upper()
	# –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞: EM03-00001-1
	m = re.search(r"\bEM\d{2}-\d{5}-\d+\b", raw)
	if m:
		return m.group(0)
	# –ü–æ–ø—ã—Ç–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: EM03 00001 1 –∏–ª–∏ EM03-00001 1 -> EM03-00001-1
	m = re.search(r"\b(EM\d{2})\D*(\d{5})\D*(\d+)\b", raw)
	if m:
		return f"{m.group(1)}-{m.group(2)}-{m.group(3)}"
	return None


async def require_code_or_hint(message: types.Message) -> Optional[str]:
	code = get_user_code(message.from_user.id)
	if not code:
		await show_menu_screen(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return None
	return code


@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
	await state.finish()
	welcome = (
		"üá®üá≥ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProBuy!</b>\n\n"
		"–ù–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞.\n"
		"–ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é.\n\n"
		"üßπ –ü–æ–º–æ–∂–µ–º –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ."
	)
	await show_menu_screen(message.chat.id, welcome, reply_markup=get_main_menu_inline(), parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data == "menu_getcod", state="*")
@dp.message_handler(commands=["getcod"], state="*")
async def menu_getcod(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		code = get_or_create_user_code(user_id)

	await show_menu_screen(tgt.chat.id, f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_address", state="*")
@dp.message_handler(commands=["adress"], state="*")
async def menu_address(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	await show_menu_screen(tgt.chat.id, CHINA_WAREHOUSE_ADDRESS.format(client_code=code), reply_markup=get_main_menu_inline(), parse_mode="HTML")
	try:
		mark_pressed_address(int(user_id))
	except Exception:
		pass


@dp.callback_query_handler(lambda c: c.data == "menu_mytracks", state="*")
@dp.message_handler(commands=["mycod"], state="*")
async def menu_mytracks(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	tracks = get_tracks(user_id)
	text = f"üîë –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n\n" + ("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫-–∫–æ–¥—ã:\n\n" + format_tracks(tracks) if tracks else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
	await show_menu_screen(tgt.chat.id, text, reply_markup=clear_history_entry_keyboard(), parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data == "menu_manager", state="*")
@dp.message_handler(commands=["manager"], state="*")
async def menu_manager(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user = cb_or_msg.from_user
	else:
		tgt = cb_or_msg
		user = cb_or_msg.from_user

	code = get_user_code(user.id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	full_name = user.full_name or ""
	username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if MANAGER_ID:
		try:
			text = (
				"üìû <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú</b>\n\n"
				f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
				f"üë§ –ò–º—è: {full_name}\n"
				f"üì± Username: {username}\n"
				f"üÜî Telegram ID: <code>{user.id}</code>\n"
			)
			await bot.send_message(MANAGER_ID, text, parse_mode="HTML")
		except Exception as e:
			logger.exception("Failed to notify manager: %s", e)
	await show_menu_screen(tgt.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_buy", state="*")
@dp.message_handler(commands=["buy"], state="*")
async def menu_buy(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	await show_menu_screen(tgt.chat.id, "üõí –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ? –û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel", reply_markup=get_main_menu_inline())
	await BuyStates.waiting_for_details.set()


@dp.message_handler(state=BuyStates.waiting_for_details, content_types=[ContentType.TEXT, ContentType.PHOTO])
async def handle_buy_details(message: types.Message, state: FSMContext):
	code = await require_code_or_hint(message)
	if not code:
		await state.finish()
		return

	text = message.caption or message.text or ""
	if len(text.strip()) < 3:
		await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ /cancel")
		return

	full_name = message.from_user.full_name or ""
	username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
	notify = (
		"üõí <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–ö–£–ü–ö–£</b>\n\n"
		f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
		f"üë§ –ò–º—è: {full_name}\n"
		f"üì± Username: {username}\n"
		f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n\n"
		f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:\n{text}"
	)
	if MANAGER_ID:
		try:
			if message.photo:
				await bot.send_photo(MANAGER_ID, message.photo[-1].file_id, caption=notify, parse_mode="HTML")
			else:
				await bot.send_message(MANAGER_ID, notify, parse_mode="HTML")
		except Exception as e:
			logger.exception("Failed to notify manager: %s", e)

	await state.finish()
	await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
	await show_menu_screen(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_sendtrack", state="*")
@dp.message_handler(commands=["sendtrack"], state="*")
async def menu_sendtrack(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	tracks = get_tracks(user_id)
	text_parts = []
	if tracks:
		text_parts.append("üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:\n\n" + format_tracks(tracks))
	text_parts.append("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
	text = "\n\n".join(text_parts)
	await show_menu_screen(tgt.chat.id, text, reply_markup=(clear_history_entry_keyboard() if tracks else None), parse_mode=("HTML" if tracks else None))
	await TrackStates.waiting_for_track.set()


@dp.callback_query_handler(lambda c: c.data == "menu_sendcargo", state="*")
async def menu_sendcargo(callback: CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(callback.id)
	await state.finish()
	user_id = callback.from_user.id
	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(callback.message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	try:
		mark_pressed_sendcargo(int(user_id))
	except Exception:
		pass

	# –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	saved = get_recipient(user_id)
	if saved and all(saved.get(k) for k in ("fio", "phone", "city")):
		fio, phone, city = saved["fio"], saved["phone"], saved["city"]
		tracks = get_tracks(user_id)
		text = (
			"üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–∑–∞\n\n"
			f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
			f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {fio}\n"
			f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
			f"üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {city}\n\n"
			"üìö –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n" + (format_tracks(tracks) if tracks else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤") + "\n\n"
			"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:"
		)
		await state.update_data(fio=fio, phone=phone, city=city)
		await CargoStates.choosing_delivery.set()
		await show_menu_screen(callback.message.chat.id, text, reply_markup=delivery_keyboard(), parse_mode="HTML")
		return

	await show_menu_screen(callback.message.chat.id, "‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –§–ò–û; —Ç–µ–ª–µ—Ñ–æ–Ω; –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω; +7 999 000-00-00; –ú–æ—Å–∫–≤–∞\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel", reply_markup=get_main_menu_inline())
	await CargoStates.waiting_for_recipient.set()


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
	await state.finish()
	await show_menu_screen(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_inline())


@dp.message_handler(state=CargoStates.waiting_for_recipient, content_types=[ContentType.TEXT])
async def handle_recipient_input(message: types.Message, state: FSMContext):
	code = await require_code_or_hint(message)
	if not code:
		await state.finish()
		return
	parsed = parse_recipient_input(message.text or "")
	if not parsed:
		await show_menu_screen(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ: –§–ò–û; —Ç–µ–ª–µ—Ñ–æ–Ω; –≥–æ—Ä–æ–¥. –ò–ª–∏ /cancel", reply_markup=get_main_menu_inline())
		return
	fio, phone, city = parsed
	await state.update_data(fio=fio, phone=phone, city=city)
	tracks = get_tracks(message.from_user.id)
	text = (
		"üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–∑–∞\n\n"
		f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
		f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {fio}\n"
		f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
		f"üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {city}\n\n"
		"üìö –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n" + (format_tracks(tracks) if tracks else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤") + "\n\n"
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:"
	)
	await CargoStates.choosing_delivery.set()
	await show_menu_screen(message.chat.id, text, reply_markup=delivery_keyboard(), parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data == "menu_clearhistory", state="*")
@dp.message_handler(lambda m: (m.text or "").strip() == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", state="*")
async def clear_history_entry(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	tracks = get_tracks(user_id)
	shipments_total = count_user_shipments(user_id)
	if not tracks and shipments_total == 0:
		await show_menu_screen(tgt.chat.id, "‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –û—á–∏—â–∞—Ç—å –Ω–µ—á–µ–≥–æ.", reply_markup=get_main_menu_inline())
		return

	await show_menu_screen(tgt.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (—Ç—Ä–µ–∫–∏ –∏ –≥—Ä—É–∑—ã)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=clear_history_confirm_keyboard())


@dp.callback_query_handler(lambda c: c.data in ("clear_confirm", "clear_cancel"), state="*")
async def clear_history_confirm(callback: CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(callback.id)
	if callback.data == "clear_cancel":
		await state.finish()
		await callback.message.edit_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	user_id = callback.from_user.id
	code = get_user_code(user_id)
	if not code:
		await state.finish()
		await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	deleted_tracks = delete_all_user_tracks(user_id)
	deleted_shipments = delete_all_user_shipments(user_id)
	await state.finish()
	await callback.message.edit_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {deleted_tracks}, –≥—Ä—É–∑–æ–≤: {deleted_shipments}.")
	await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.message_handler(state=TrackStates.waiting_for_track, content_types=[ContentType.TEXT])
async def handle_track_input(message: types.Message, state: FSMContext):
	code = await require_code_or_hint(message)
	if not code:
		await state.finish()
		return

	track = (message.text or "").strip().upper()
	if not is_valid_track_number(track):
		await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
		return

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –î–æ—Å—Ç–∞–≤–∫—É —É—Ç–æ—á–Ω–∏–º –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞.
	try:
		add_track(message.from_user.id, track, "")
	except Exception as e:
		logger.exception("Failed to save track: %s", e)
		await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	await state.finish()
	await message.answer(
		f"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: <code>{track}</code>\n\n"
		"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑, –Ω–∞–∂–º–∏—Ç–µ ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑¬ª. –í—Å–µ –≤–∞—à–∏ —Ç—Ä–µ–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–∫–ª–∞–¥—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
		parse_mode="HTML",
	)
	await show_menu_screen(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=TrackStates.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(callback.id)
	if callback.data == "delivery_cancel":
		await state.finish()
		await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	delivery_key = callback.data.replace("delivery_", "")
	delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
	await state.update_data(delivery=delivery_key)

	data = await state.get_data()
	track = data["track"]

	await TrackStates.confirming.set()
	await callback.message.edit_text(
		f"üì¶ –¢—Ä–µ–∫: <code>{track}</code>\n"
		f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n\n"
		f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
		parse_mode="HTML",
		reply_markup=confirm_keyboard(),
	)


@dp.callback_query_handler(lambda c: c.data in ("confirm_track", "confirm_cancel"), state=TrackStates.confirming)
async def confirm_track(callback: CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(callback.id)
	if callback.data == "confirm_cancel":
		await state.finish()
		await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	user_id = callback.from_user.id
	code = get_user_code(user_id)
	if not code:
		await state.finish()
		await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	data = await state.get_data()
	track = data["track"]
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–∫ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏; –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥ –±—É–¥–µ—Ç –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
	try:
		add_track(user_id, track, "")
	except Exception as e:
		logger.exception("Failed to save track: %s", e)
		await state.finish()
		await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
		return

	await state.finish()
	await callback.message.edit_text(
		"‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–∑–∞.",
		parse_mode="HTML",
	)
	await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_photokontrol", state="*")
@dp.message_handler(commands=["photo", "photos"], state="*")
async def menu_photokontrol(cb_or_msg, state: FSMContext):
	await state.finish()
	if isinstance(cb_or_msg, CallbackQuery):
		await bot.answer_callback_query(cb_or_msg.id)
		tgt = cb_or_msg.message
		user_id = cb_or_msg.from_user.id
	else:
		tgt = cb_or_msg
		user_id = cb_or_msg.from_user.id

	code = get_user_code(user_id)
	if not code:
		await show_menu_screen(tgt.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
		return

	user_tracks = get_tracks(user_id)
	text_parts = []
	if user_tracks:
		text_parts.append("üì¶ –í–∞—à–∏ —Ç—Ä–µ–∫–∏:\n\n" + format_tracks(user_tracks))
	text_parts.append("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
	await show_menu_screen(tgt.chat.id, "\n\n".join(text_parts), reply_markup=(clear_history_entry_keyboard() if user_tracks else None), parse_mode=("HTML" if user_tracks else None))
	await PhotoStates.waiting_for_track.set()


@dp.message_handler(lambda m: (m.text or "").strip() == "üì∑ –§–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—å", state="*")
async def menu_photokontrol_reply_button(message: types.Message, state: FSMContext):
	await menu_photokontrol(message, state)


@dp.message_handler(state=PhotoStates.waiting_for_track, content_types=[ContentType.TEXT])
async def handle_photo_request(message: types.Message, state: FSMContext):
	code = await require_code_or_hint(message)
	if not code:
		await state.finish()
		return

	track = (message.text or "").strip().upper()
	if not is_valid_track_number(track):
		await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /cancel")
		return

	photos = get_track_photos(track)
	if not photos:
		await state.finish()
		await show_menu_screen(message.chat.id, f"üì≠ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É <code>{track}</code> –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", reply_markup=get_main_menu_inline(), parse_mode="HTML")
		return

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	first = True
	for file_id in photos:
		try:
			caption = f"üì∑ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É: <code>{track}</code>" if first else None
			await bot.send_photo(message.chat.id, file_id, caption=caption, parse_mode="HTML")
			first = False
		except Exception as e:
			logger.exception("Failed to send track photo to user: %s", e)

	await state.finish()
	await show_menu_screen(message.chat.id, "‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu_inline())
	# –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
	user_tracks = get_tracks(message.from_user.id)
	if user_tracks:
		await show_menu_screen(message.chat.id, "–ù—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–∫–æ–≤?", reply_markup=clear_history_entry_keyboard())


@dp.callback_query_handler(lambda c: c.data in ("cargo_confirm", "cargo_edit", "cargo_cancel"), state=CargoStates.confirming)
async def confirm_cargo(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "cargo_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return
    if callback.data == "cargo_edit":
        await CargoStates.waiting_for_recipient.set()
        await show_menu_screen(callback.message.chat.id, "‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –§–ò–û; —Ç–µ–ª–µ—Ñ–æ–Ω; –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel", reply_markup=get_main_menu_inline())
        return

    user_id = callback.from_user.id
    code = get_user_code(user_id)
    if not code:
        await state.finish()
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.")
        await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    data = await state.get_data()
    fio, phone, city = data.get("fio", ""), data.get("phone", ""), data.get("city", "")
    delivery_key = data.get("delivery")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ") if delivery_key else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    set_recipient(user_id, fio, phone, city)

    tracks = get_tracks(user_id)
    cargo_num = get_next_cargo_num(user_id)
    cargo_code = f"{code}-{cargo_num}"
    try:
        # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–∞ —Å–±–æ—Ä–∫–µ
        create_shipment(user_id, cargo_num, cargo_code, fio, phone, city, status="–Ω–∞ —Å–±–æ—Ä–∫–µ")
    except Exception as e:
        logger.exception("Failed to create shipment: %s", e)
        await state.finish()
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    full_name = callback.from_user.full_name or ""
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    # –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    seen = set()
    unique_track_lines = []
    for idx, (t, _d) in enumerate([(t, d) for (t, d) in tracks], start=1):
        if t in seen:
            continue
        seen.add(t)
        unique_track_lines.append(f"{len(seen)}. <code>{t}</code>")

    text = (
        "üì¶ <b>–ó–ê–Ø–í–ö–ê –ù–ê –û–¢–ü–†–ê–í–ö–£ –ì–†–£–ó–ê</b>\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üì¶ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: <b>{cargo_code}</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
        f"üì± Username: {username}\n"
        f"üÜî Telegram ID: <code>{user_id}</code>\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {fio}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {city}\n"
        f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_name}\n\n"
        "üìö –¢—Ä–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:\n" + ("\n".join(unique_track_lines) if unique_track_lines else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
    )
    if WAREHOUSE_ID:
        try:
            await bot.send_message(WAREHOUSE_ID, text, parse_mode="HTML")
        except Exception as e:
            logger.exception("Failed to notify warehouse about cargo: %s", e)

    await state.finish()
    await callback.message.edit_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–∫–ª–∞–¥–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞: <b>{cargo_code}</b>",
        parse_mode="HTML",
    )
    await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())

@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=CargoStates.choosing_delivery)
async def choose_cargo_delivery(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    if callback.data == "delivery_cancel":
        await state.finish()
        await callback.message.edit_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
        return

    delivery_key = callback.data.replace("delivery_", "")
    delivery_name = DELIVERY_TYPES.get(delivery_key, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(delivery=delivery_key)

    data = await state.get_data()
    user_id = callback.from_user.id
    code = get_user_code(user_id) or "‚Äî"
    fio, phone, city = data.get("fio", ""), data.get("phone", ""), data.get("city", "")
    tracks = get_tracks(user_id)

    # –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    seen = set()
    unique_track_lines = []
    for (t, _d) in tracks:
        if t in seen:
            continue
        seen.add(t)
        unique_track_lines.append(f"{len(seen)}. <code>{t}</code>")

    text = (
        "üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–∑–∞\n\n"
        f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {fio}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {city}\n"
        f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_name}\n\n"
        "üìö –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n" + ("\n".join(unique_track_lines) if unique_track_lines else "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤") + "\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?"
    )
    await CargoStates.confirming.set()
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=cargo_confirm_keyboard())


@dp.callback_query_handler(lambda c: c.data == "menu_warehouse", state="*")
async def menu_warehouse(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await state.finish()
    await show_menu_screen(callback.message.chat.id, "üè≠ –†–∞–∑–¥–µ–ª —Å–∫–ª–∞–¥–∞:", reply_markup=warehouse_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "back_main", state="*")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await state.finish()
    await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


@dp.callback_query_handler(lambda c: c.data == "menu_status", state="*")
async def menu_status(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await state.finish()
    await show_menu_screen(callback.message.chat.id, "üì¶ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞:", reply_markup=cargo_status_menu_keyboard())


def _format_cargo_list(title: str, items: list[str]) -> str:
    if not items:
        return f"{title}: –ø—É—Å—Ç–æ"
    lines = [f"{idx}. <code>{code}</code>" for idx, code in enumerate(items, start=1)]
    return f"{title} (–≤—Å–µ–≥–æ: {len(items)}):\n" + "\n".join(lines)


@dp.callback_query_handler(lambda c: c.data in ("status_building", "status_shipped"), state="*")
async def menu_status_list(callback: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await state.finish()
    user_id = callback.from_user.id
    code = get_user_code(user_id)
    if not code:
        await show_menu_screen(callback.message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–æ–¥: –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª.", reply_markup=get_main_menu_inline())
        return
    status_value = "–Ω–∞ —Å–±–æ—Ä–∫–µ" if callback.data == "status_building" else "–æ—Ç–≥—Ä—É–∂–µ–Ω"
    try:
        cargo_codes = list_user_shipments_by_status(user_id, status_value)
    except Exception:
        cargo_codes = []
    title = "üß∞ –ù–∞ —Å–±–æ—Ä–∫–µ" if callback.data == "status_building" else "‚úÖ –û—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–µ"
    text = _format_cargo_list(title, cargo_codes)
    await show_menu_screen(callback.message.chat.id, text, reply_markup=cargo_status_menu_keyboard(), parse_mode="HTML")
    # –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_menu_screen(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())
@dp.message_handler(lambda m: (getattr(m, "caption", "") or "").strip().lower().startswith("/shipped"), content_types=[ContentType.PHOTO], state="*")
async def admin_shipped_with_photo(message: types.Message, state: FSMContext):
	# –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–∏–¥–∞ "/shipped EM.." –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	if message.from_user.id not in {MANAGER_ID, WAREHOUSE_ID}:
		return
	caption_text = (message.caption or "").strip()

	cargo_code = extract_cargo_code(caption_text)
	if not cargo_code:
		await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –≤ –ø–æ–¥–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /shipped EM03-00001-1")
		return
	user_id = get_user_id_by_cargo_code(cargo_code)
	if not user_id:
		await message.answer(f"–ì—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º <code>{cargo_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
		return
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –æ—Ç–≥—Ä—É–∂–µ–Ω
	try:
		update_shipment_status(cargo_code, "–æ—Ç–≥—Ä—É–∂–µ–Ω")
	except Exception:
		pass
	try:
		await bot.send_photo(
			user_id,
			message.photo[-1].file_id,
			caption=f"üì¶ –í–∞—à –≥—Ä—É–∑ <b>{cargo_code}</b> —É–ø–∞–∫–æ–≤–∞–Ω –∏ –æ—Ç–≥—Ä—É–∂–µ–Ω –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.",
			parse_mode="HTML",
		)
		await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	except Exception as e:
		logger.exception("Failed to notify user about shipped cargo (single message): %s", e)
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É")
@dp.message_handler(content_types=[ContentType.PHOTO], state="*")
async def warehouse_photo_upload(message: types.Message, state: FSMContext):
	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Å–∫–ª–∞–¥ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä)
	if message.from_user.id not in {MANAGER_ID, WAREHOUSE_ID}:
		return

	# –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–∏–¥–∞ "/shipped ...", –æ—Ç–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É
	if (message.caption or "").strip().lower().startswith("/shipped"):
		return

	# –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç —Å–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–∑–∞ (/shipped),
	# –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç—Ä–µ–∫ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π
	# ‚Äî —Ñ–æ—Ç–æ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –¥–ª—è /shipped
	current_state = await state.get_state()
	if current_state in {
		AdminShipmentStates.waiting_for_media.state,
		AdminShipmentStates.waiting_for_cargo_code.state,
	}:
		return

	# –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç—Ä–µ–∫ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑ —Ä–µ–ø–ª–∞—è
	track = extract_track_from_text(message.caption)
	if not track and message.reply_to_message:
		# –ü—ã—Ç–∞–µ–º—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		track = extract_track_from_text(getattr(message.reply_to_message, "text", None) or getattr(message.reply_to_message, "caption", None))

	if not track:
		await message.answer(
			"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥. –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫ –≤ –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AB123456789CN) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º."
		)
		return

	track = track.upper()
	file_id = message.photo[-1].file_id

	try:
		add_track_photo(track, file_id, uploaded_by=message.from_user.id, caption=message.caption)
	except Exception as e:
		logger.exception("Failed to save track photo: %s", e)
		await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return

	# –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —ç—Ç–æ—Ç —Ç—Ä–µ–∫
	user_ids = find_user_ids_by_track(track)
	sent_count = 0
	for uid in set(user_ids):
		try:
			await bot.send_photo(uid, file_id, caption=f"üì∑ –§–æ—Ç–æ –ø–æ —Ç—Ä–µ–∫—É: <code>{track}</code>", parse_mode="HTML")
			sent_count += 1
		except Exception as e:
			logger.exception("Failed to deliver track photo to user %s: %s", uid, e)

	if sent_count > 0:
		await message.answer(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∫–ª–∏–µ–Ω—Ç—É(–∞–º).")
	else:
		await message.answer(
			"‚ÑπÔ∏è –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ö–ª–∏–µ–Ω—Ç—ã –ø–æ —ç—Ç–æ–º—É —Ç—Ä–µ–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫, –æ–Ω —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ."
		)


@dp.message_handler(commands=["shipped"], state="*")
async def admin_shipped_start(message: types.Message, state: FSMContext):
	# –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ —Å–∫–ª–∞–¥
	if message.from_user.id not in {MANAGER_ID, WAREHOUSE_ID}:
		return
	await state.finish()
	args = (message.get_args() or "").strip()
	cargo_code = extract_cargo_code(args)
	if not cargo_code:
		await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /shipped EM03-00001-1")
		return
	user_id = get_user_id_by_cargo_code(cargo_code)
	if not user_id:
		await message.answer(f"–ì—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º <code>{cargo_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
		return
	await state.update_data(cargo_code=cargo_code, target_user_id=user_id)
	await AdminShipmentStates.waiting_for_media.set()
	await message.answer(
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≥—Ä—É–∑–∞/–Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç '–≥–æ—Ç–æ–≤–æ' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel."
	)


@dp.message_handler(lambda m: m.text and m.text.lower() in {"–≥–æ—Ç–æ–≤–æ", "done", "/done"}, state=AdminShipmentStates.waiting_for_media)
async def admin_shipped_finish(message: types.Message, state: FSMContext):
	data = await state.get_data()
	user_id = data.get("target_user_id")
	cargo_code = data.get("cargo_code")
	if not user_id or not cargo_code:
		await state.finish()
		await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /shipped.")
		return
	buffer_key = f"{message.from_user.id}:{cargo_code}"
	media_items = _admin_album_buffers.get(buffer_key, [])
	if not media_items:
		await state.finish()
		await message.answer("–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º.")
		return

	# –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É (–ø–µ—Ä–≤—ã–µ 10 –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é Telegram)
	group: list[InputMediaPhoto] = []
	for idx, item in enumerate(media_items[:10]):
		caption = (f"üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–∑–∞ <b>{cargo_code}</b>" if idx == 0 else None)
		group.append(InputMediaPhoto(media=item["file_id"], caption=caption, parse_mode="HTML"))

	try:
		if len(group) == 1:
			await bot.send_photo(user_id, group[0].media, caption=group[0].caption, parse_mode="HTML")
		else:
			await bot.send_media_group(user_id, group)
		await bot.send_message(user_id, f"‚úÖ –í–∞—à –≥—Ä—É–∑ <b>{cargo_code}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –§–æ—Ç–æ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.", parse_mode="HTML")
		await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	except Exception as e:
		logger.exception("Failed to notify user about shipped cargo: %s", e)
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É")

	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç–≥—Ä—É–∂–µ–Ω
	try:
		update_shipment_status(cargo_code, "–æ—Ç–≥—Ä—É–∂–µ–Ω")
	except Exception:
		pass

	# –û—á–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	_admin_album_buffers.pop(buffer_key, None)
	await state.finish()


@dp.message_handler(content_types=[ContentType.PHOTO], state=AdminShipmentStates.waiting_for_media)
async def admin_shipped_collect_media(message: types.Message, state: FSMContext):
	data = await state.get_data()
	cargo_code = data.get("cargo_code")
	if not cargo_code:
		return
	buffer_key = f"{message.from_user.id}:{cargo_code}"
	items = _admin_album_buffers.setdefault(buffer_key, [])
	items.append({"file_id": message.photo[-1].file_id})
	await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.")

@dp.message_handler(commands=["findtracks"], state="*")
async def admin_findtracks(message: types.Message, state: FSMContext):
	await state.finish()
	# Only manager or warehouse can use
	if message.from_user.id not in {MANAGER_ID, WAREHOUSE_ID}:
		return
	args = (message.get_args() or "").strip()
	if not args:
		await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /findtracks EM03-00001")
		return
	code = args.upper()
	user_id = get_user_id_by_code(code)
	if not user_id:
		await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º <code>{code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
		return
	# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
	full_name = "‚Äî"
	username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
	try:
		chat = await bot.get_chat(user_id)
		first_name = getattr(chat, "first_name", None) or ""
		last_name = getattr(chat, "last_name", None) or ""
		full_name = (f"{first_name} {last_name}").strip() or "‚Äî"
		if getattr(chat, "username", None):
			username = f"@{chat.username}"
	except Exception:
		pass

	tracks = get_tracks(user_id)
	user_block = (
		"üßë‚Äçüíº –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
		f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: <code>{code}</code>\n"
		f"üë§ –ò–º—è: {full_name}\n"
		f"üì± Username: {username}\n"
		f"üÜî Telegram ID: <code>{user_id}</code>\n"
	)
	if not tracks:
		await message.answer(
			user_block + "\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.",
			parse_mode="HTML",
		)
		return
	text = (
		user_block
		+ "\nüì¶ –¢—Ä–µ–∫–∏:\n\n"
		+ format_tracks(tracks)
	)
	await message.answer(text, parse_mode="HTML")


@dp.message_handler()
async def fallback(message: types.Message):
	await show_menu_screen(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_inline())


async def on_startup(dp: Dispatcher):
	init_db()
	try:
		dp.middleware.setup(ActivityMiddleware())
	except Exception:
		pass

	# Background reminder loop
	async def reminder_loop():
		while True:
			try:
				# 5-day: address
				for uid in get_users_for_address_reminder(days=5):
					try:
						await bot.send_message(int(uid), "–í–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ? –°–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –º—ã –≤—Å–µ –ø–æ–¥—Å–∫–∞–∂–µ–º!")
						mark_address_reminder_sent(int(uid))
					except Exception:
						pass
				# 15-day: send cargo
				for uid in get_users_for_sendcargo_reminder(days=15):
					try:
						await bot.send_message(int(uid), "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ ? –ú—ã –≥–æ—Ç–æ–≤—ã –∏—Ö –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!")
						mark_sendcargo_reminder_sent(int(uid))
					except Exception:
						pass
				# 30-day: inactivity
				for uid in get_users_for_inactive_reminder(days=30):
					try:
						await bot.send_message(int(uid), "–°–æ–≤–µ—Ä—à–∞–π—Ç–µ —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤–º–µ—Å—Ç–µ —Å ProBuy!")
						mark_inactive_reminder_sent(int(uid))
					except Exception:
						pass
			except Exception:
				pass
			await asyncio.sleep(3600)

	asyncio.get_running_loop().create_task(reminder_loop())
	try:
		await bot.delete_webhook(drop_pending_updates=True)
	except Exception:
		pass
	try:
		# –ß–∏—Å—Ç–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
		from aiogram.types import (
			BotCommandScopeDefault,
			BotCommandScopeAllPrivateChats,
			BotCommandScopeAllGroupChats,
			BotCommandScopeAllChatAdministrators,
		)
		for scope in [
			BotCommandScopeDefault(),
			BotCommandScopeAllPrivateChats(),
			BotCommandScopeAllGroupChats(),
			BotCommandScopeAllChatAdministrators(),
		]:
			try:
				await bot.delete_my_commands(scope=scope)
			except Exception:
				pass
		try:
			await bot.delete_my_commands()
		except Exception:
			pass
	except Exception:
		pass

	try:
		if MANAGER_ID:
			await bot.send_message(MANAGER_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
	except Exception:
		pass


async def on_shutdown(dp: Dispatcher):
	try:
		if MANAGER_ID:
			await bot.send_message(MANAGER_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	except Exception:
		pass


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=False, on_startup=on_startup, on_shutdown=on_shutdown)
