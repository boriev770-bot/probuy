import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192  # –í–∞—à Telegram ID (—á–∏—Å–ª–æ)
WAREHOUSE_ID = 7095008192  # ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–∞ (—á–∏—Å–ª–æ)

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

async def generate_user_code(user_id, message=None):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        data[user_id] = {
            "code": new_code,
            "tracks": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "state": None
        }
        save_data(data)
    return data[user_id]['code']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_code = await generate_user_code(message.from_user.id, message)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–±–æ—Ä–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/mytracks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['adress'])
async def send_address(message: types.Message):
    try:
        user_code = await generate_user_code(message.from_user.id, message)
        address = CHINA_WAREHOUSE_ADDRESS.format(user_code=user_code)
        await message.answer(
            f"üè≠ –ê–¥—Ä–µ—Å –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n\n{address}\n\n"
            f"–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º: {user_code}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /adress: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")

@dp.message_handler(commands=['buy'])
async def start_order(message: types.Message):
    try:
        user_code = await generate_user_code(message.from_user.id, message)
        data = load_data()
        user_id = str(message.from_user.id)
        
        data[user_id] = {
            "code": user_code,
            "tracks": data.get(user_id, {}).get("tracks", []),
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
            "state": UserStates.WAITING_FOR_ORDER
        }
        save_data(data)
        
        await message.answer(
            f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∫–æ–¥: {user_code})\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
            "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "- –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /buy: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@dp.message_handler(content_types=[ContentType.TEXT, ContentType.PHOTO, ContentType.DOCUMENT])
async def handle_order_details(message: types.Message):
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_ORDER:
            return
        
        user_code = data[user_id]['code']
        full_name = data[user_id]['full_name']
        username = f"@{data[user_id]['username']}" if data[user_id]['username'] else "–Ω–µ—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if message.text:
            order_text = message.text
        elif message.caption:
            order_text = message.caption
        else:
            order_text = "–û–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üõç –ù–û–í–´–ô –ó–ê–ö–ê–ó\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
            f"üìé Username: {username}\n"
            f"üÜî –ö–æ–¥: {user_code}\n\n"
            f"üì¶ –ó–∞–∫–∞–∑:\n{order_text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.photo:
            await bot.send_photo(
                ADMIN_ID,
                message.photo[-1].file_id,
                caption=f"–§–æ—Ç–æ –∫ –∑–∞–∫–∞–∑—É {user_code}"
            )
        elif message.document:
            await bot.send_document(
                ADMIN_ID,
                message.document.file_id,
                caption=f"–§–∞–π–ª –∫ –∑–∞–∫–∞–∑—É {user_code}"
            )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            f"–í–∞—à –∫–æ–¥ –∑–∞–∫–∞–∑–∞: {user_code}"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data[user_id]['state'] = None
        save_data(data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")

@dp.message_handler(commands=['manager'])
async def contact_manager(message: types.Message):
    try:
        user_code = await generate_user_code(message.from_user.id, message)
        full_name = message.from_user.full_name
        username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç"
        
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"–í–∞—à –∫–æ–¥: {user_code}"
        )
        
        await bot.send_message(
            ADMIN_ID,
            f"üìû –ó–ê–ü–†–û–° –°–í–Ø–ó–ò –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
            f"üìé Username: {username}\n"
            f"üÜî –ö–æ–¥: {user_code}\n\n"
            f"–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: https://t.me/{message.from_user.username}"
            if message.from_user.username else ""
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /manager: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# ... (–¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
