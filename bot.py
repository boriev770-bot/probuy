import os
import re
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils import executor
from datetime import datetime

TOKEN = "7559588518:AAEv5n_8N_gGo97HwpZXDHTi3EQ40S1aFcI"
ADMIN_ID = 7095008192
WAREHOUSE_ID = 7095008192  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–∫–ª–∞–¥–∞

# –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ
CHINA_WAREHOUSE_ADDRESS = """–ö–∏—Ç–∞–π, –≥. –ì—É–∞–Ω—á–∂–æ—É, —Ä–∞–π–æ–Ω –ë–∞–π—é–Ω—å
—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è 123, —Å–∫–ª–∞–¥ 456
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +86 123 4567 8910
–í–∞—à –∫–æ–¥: {user_code}"""

DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class UserStates:
    WAITING_FOR_TRACK = "waiting_for_track"
    WAITING_FOR_ORDER = "waiting_for_order"

async def generate_user_code(user_id, message=None):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        last_code = max([int(v['code'][2:]) for v in data.values()] or [0])
        new_code = f"PR{last_code + 1:05d}"
        data[user_id] = {
            "code": new_code,
            "tracks": [],
            "username": message.from_user.username if message else "",
            "full_name": message.from_user.full_name if message else "",
            "state": None
        }
        save_data(data)
    return data[user_id]['code']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_code = await generate_user_code(message.from_user.id, message)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–±–æ—Ä–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mycod - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥\n"
        "/mytracks - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫–∏\n"
        "/adress - –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞\n"
        "/sendtrack - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫\n"
        "/buy - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/manager - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )

@dp.message_handler(commands=['mycod'])
async def show_my_code(message: types.Message):
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data:
            user_code = await generate_user_code(message.from_user.id, message)
        else:
            user_code = data[user_id]['code']
        
        await message.answer(
            f"üîë –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥: {user_code}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤.\n"
            f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: /adress"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /mycod: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞")

@dp.message_handler(commands=['sendtrack'])
async def send_track(message: types.Message):
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data:
            user_code = await generate_user_code(message.from_user.id, message)
        else:
            user_code = data[user_id]['code']
        
        data[user_id]['state'] = UserStates.WAITING_FOR_TRACK
        save_data(data)
        
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∫–æ–¥–∞ {user_code}:\n\n"
            "–§–æ—Ä–º–∞—Ç: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (10-20 —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "–ü—Ä–∏–º–µ—Ä: AB123456789CD"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /sendtrack: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@dp.message_handler(regexp=r'^[A-Za-z0-9]{10,20}$')
async def handle_track_number(message: types.Message):
    try:
        data = load_data()
        user_id = str(message.from_user.id)
        
        if user_id not in data or data[user_id].get('state') != UserStates.WAITING_FOR_TRACK:
            return
        
        track = message.text.upper()
        user_code = data[user_id]['code']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'tracks' not in data[user_id]:
            data[user_id]['tracks'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
        data[user_id]['tracks'].append({
            "track": track,
            "date": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥
        await bot.send_message(
            WAREHOUSE_ID,
            f"üì¶ –ù–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä\n\n"
            f"–ö–æ–¥: {user_code}\n"
            f"–¢—Ä–µ–∫: {track}\n"
            f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {len(data[user_id]['tracks'])}"
        )
        
        await message.answer(f"‚úÖ –¢—Ä–µ–∫ {track} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∫–æ–¥—É {user_code}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data[user_id]['state'] = None
        save_data(data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)

if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_data({})
    
    executor.start_polling(dp, skip_updates=True)
